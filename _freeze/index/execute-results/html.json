{
  "hash": "2719e02f09504fe0312f79e24bcfd70d",
  "result": {
    "markdown": "---\ntitle: \"Efficient data manipulation with R\"\n# subtitle: \"You too can be a pro!!!\"\nauthor: \"Philippe Massicotte\"\ndate: \"2023-03-02\"\ndate-format: \"long\"\ninstitute: \"Laval University\"\nchalkboard:\n  theme: whiteboard\nformat: \n  revealjs:\n    theme: \n      - solarized\n      - theme.scss\n    fig-dpi: 300\n    fig-align: center\n    footer: \"[https://jthomasmock.github.io/arrow-dplyr](https://jthomasmock.github.io/arrow-dplyr)\"\n    highlight-style: a11y\n    height: 1080\n    width: 1920\n    slide-number: c/t\n    transition: fade\n    preview-links: true\n    hide-inactive-cursor: true\n\nknitr:\n  opts_chunk:\n    dev: \"ragg_png\"\n    retina: 1\n    dpi: 300\n\nexecute:\n  freeze: auto\n  cache: true\n  echo: true\n  fig-width: 6\n  fig-height: 4\n\neditor: source\n\neditor_options: \n  chunk_output_type: console\nbibliography: references.bib\n---\n\n\n\n\n## Who am I\n\n:::: {.columns}\n\n::: {.column width='40%'}\n\n<img src=\"images/myname.png\" width=\"400px\"/>\n\n<br>\n\n::: {layout=\"[[1,1], [1]]\"}\n\n![](images/logos/takuvik.svg)\n\n![](images/logos/sn.png)\n\n![](images/logos/ulaval.svg)\n\n:::\n\n:::\n\n::: {.column width='5%'}\n:::\n\n::: {.column width='55%'}\n\n[Research assistant at Takuvik (Laval University)]{style=\"font-weight:bold;font-size:1.5em\"}\n\n<small>*Remote sensing, modelling, data science, data visualization*</small><br>\n\n{{< fa brands github >}} [My GitHub](https://github.com/PMassicotte){style=\"font-weight:bold;\"}\n\n{{< fa brands twitter >}} [Follow me on Twitter](https://twitter.com/philmassicotte){style=\"font-weight:bold;\"}\n\n{{< fa brands mastodon >}} [Follow me on Mastodon](https://fosstodon.org/@philmassicotte){style=\"font-weight:bold;\"}\n\n{{< fa link >}} [www.pmassicotte.com](https://www.pmassicotte.com){style=\"font-weight:bold;\"}\n\n:::\n::::\n\n## Context\n\n:::: {.columns}\n\n::: {.column width='70%'}\n\n<figure>\n<center>\n<img src=\"images/environmental-data-science-r4ds-general.png\" alt=\"The expanded version of the classic Grolemund & Wickham R4DS workflow, including environmental data & sci comm bookends! Envisioned by Dr. Julia Lowndes for her useR!2019 keynote. Please cite this illustration as: Updated from Grolemund & Wickham's classis R4DS schematic, envisioned by Dr. Julia Lowndes for her 2019 useR! keynote talk and illustrated by Allison Horst.\" style=\"width:85%\"/>\n<figcaption>Artwork by Allison Horst</figcaption>\n</center>\n</figure>\n\n:::\n\n::: {.column width='30%'}\n\n> [**It is often said that 80% of data analysis is spent on cleaning and preparing data.** And it's not just a first step, but it must be repeated many over the course of analysis as new problems come to light or new data is collected.]{style=\"font-size:0.9em;\"}\n\n:::\n\n::::\n\n## Context\n\n:::: {.columns}\n\n::: {.column width='70%'}\n\n<figure>\n<center>\n<img src=\"images/environmental-data-science-r4ds-general.png\" alt=\"The expanded version of the classic Grolemund & Wickham R4DS workflow, including environmental data & sci comm bookends! Envisioned by Dr. Julia Lowndes for her useR!2019 keynote. Please cite this illustration as: Updated from Grolemund & Wickham's classis R4DS schematic, envisioned by Dr. Julia Lowndes for her 2019 useR! keynote talk and illustrated by Allison Horst.\" style=\"width:85%\"/>\n<figcaption>Artwork by Allison Horst</figcaption>\n</center>\n</figure>\n\n:::\n\n::: {.column width='30%'}\n\n> [Data preprocessing is one of the main steps in the data science project life cycle which involves **converting raw data into a refined form amenable to data analysis**. [Source: https://towardsdatascience.com](https://towardsdatascience.com/three-critical-elements-of-data-preprocessing-part-2-2078110ae8e7)]{style=\"font-size:0.9em;\"}\n\n:::\n\n::::\n\n## Objectives\n\n::: {.incremental}\n\n- Understand the basics of data manipulation techniques using R.\n\n- Learn how to clean and transform raw data into a format suitable for analysis using `dplyr` and `tidyr`.\n\n- Develop the ability to manipulate and analyze datasets: **grouping**, **filtering** and **summarizing**.\n\n- Acquire knowledge on how to **join, merge and aggregate data** from multiple sources to produce meaningful insights.\n\n:::\n\n## Who are you?\n\n- Diverse faculties and academic backgrounds.\n\n- Efforts to offer examples that are pertinent to everyone in the classroom.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-2_e3326dddba45039137fbfa809d7ff0c9'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-2-1.png){width=3000}\n:::\n:::\n\n\n## Prerequisites\n\n- This workshop **is not** an introduction to R programming.\n\n- I am assuming that you already have basic knowledge of R. \n\n- You should know how to:\n  - Install R packages\n  - Use R Studio or another of your choice\n  - Create R scripts\n  - Import data\n  - Work with data frame\n  - Perform basic calculations\n\n## Getting ready to code!\n\nIf you do not have R/R Studio installed on your laptop, I have created a pre-configured cloud instance of R with all the packages needed for this workshop. If you choose this option, you need to have a free [Posit](https://posit.cloud) account.\n\n- **Step 1:** Open the course project\n\n  - Go to this URL: [https://posit.cloud/spaces/338666/](https://posit.cloud/spaces/338666/).\n  - You will have to create or login into your Posit account first.\n\n<p class=\"\" style=\"margin: 10px;\"></p>\n\n- **Step 2:** Make a copy of the project\n\n <figure>\n  <center>\n  <img src= \"images/posit_cloud_copy_project.png\" alt=\"Trulli\" style=\"width:60%\">\n  </center>\n</figure> \n\n::: footer\n <figure>\n  <center>\n  <img src= \"images/Posit-logo-h-full-color-RGB-TM.svg\" alt=\"Trulli\" style=\"width:20%\">\n  </center>\n</figure> \n:::\n\n# Data frames {background-color=\"#2C404A\"}\n\n## Data frames\n\n::: {.incremental}\n\n- **Data frames** are important objects in R which are created when reading (most) tabular text files.\n\n- The most useful data structure for data scientists.\n  \n- They allow for efficient data manipulation:\n  - Filtering\n  - Summarizing\n  - Aggregating\n  - Joining\n  - And much more!\n\n:::\n\n## Data frames\n\n- A data frame can be seen as an Excel tabular sheet: **Lines are observations** and **columns are variables**.\n\n <figure>\n  <center>\n  <img src=\"https://rstudio-education.github.io/tidyverse-cookbook/images/tidy-data.png\" alt=\"Trulli\" style=\"width:50%\">\n  <figcaption>Source: [Tidyverse cookbook](https://rstudio-education.github.io/tidyverse-cookbook/)</figcaption>\n  </center>\n</figure> \n\n::: {.callout-note}\nA data frame can be seen as a matrix with the difference that **columns (variables) can be of different types** (numerics, dates, characters, etc.).\n:::\n\n## Data frames\n\nThe `mtcars` data frame is included in base R.\n\n:::: {.columns}\n\n::: {.column width='40%'}\n> The data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models).\n:::\n\n::: {.column width='60%' .small}\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-3_f2d7e45df4c5f39f02666aab10ef3e80'}\n\n```{.r .cell-code}\nmtcars\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n```\n:::\n:::\n\n:::\n\n::::\n\n# Importing data in R {background-color=\"#2C404A\"}\n\n## Reading files\n\n- Why bother about **data frame**? Most of the time, this is the data structure that will be created when importing data in R.\n\n- There are many functions to import data in R.\n\n| **File format**                    | **Function**   | **Package** |\n|------------------------------------|----------------|-------------|\n| Comma separated values (.csv)      | `read_csv()`   | readr       |\n| Other text files (.txt, .dat, ...) | `read_delim()` | readr       |\n| Excel (.xls, .xlsx)                | `read_excel()` | readxl      |\n| Stata                              | `read_stata()` | haven       |\n| SPSS                               | `read_spss()`  | haven       |\n| SAS                                | `read_sas()`   | haven       |\n| Matlab file (.mat)                 | `readMat()`    | R.matlab    |\n\n## Reading Excel files\n\n:::: {.columns}\n\n::: {.column width='80%'}\nTo read Excel files, we can use `read_excel()` from the `readxl` package.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-4_f2d0c6f5c021b675e7d5441cf2221034'}\n\n```{.r .cell-code}\n# Load the readxl package\nlibrary(readxl)\n\n# Read the first sheet in a file\nmydata <- read_excel(\"/path/to/myfile.xls\")\n\n# Read the third sheet in a file\nmydata <- read_excel(\"/path/to/myfile.xlsx\", sheet = 3)\n```\n:::\n\n:::\n\n::: {.column width='20%'}\n![](https://raw.githubusercontent.com/tidyverse/readxl/main/img/readxl.png){width=400}\n:::\n\n::::\n\n## Reading CSV files\n\n:::: {.columns}\n\n::: {.column width='80%'}\nTo read CSV files, we can use `read_csv()` from the `readr` package.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-5_ac278462a6408ba01de3b0188996903e'}\n\n```{.r .cell-code  code-line-numbers=\"1-6|7-8\"}\n# Load the readr package\nlibrary(readr)\n\n# If the column delimiter is \",\"\nmydata <- read_csv(\"/path/to/myfile.csv\")\n\n# If the column delimiter is \";\"\nmydata <- read_csv2(\"/path/to/myfile.csv\")\n```\n:::\n\n:::\n\n::: {.column width='20%'}\n![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/PNG/readr.png){width=400}\n:::\n\n::::\n\n:::: {.fragment}\n\n::: {.callout-important}\nNote that the base R function to read a CSV file is `read.csv()`. Do not confuse with the `read_csv()` function from `readr`.\n:::\n\n::::\n\n## Exporting data\n\nSimilarly, exporting a data frame into a file can be done using: `write_*()`.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-6_6c59c0d414008dad0c12aefdb764ba93'}\n\n```{.r .cell-code}\nwrite_csv(df, \"/path/to/myfile.csv\")\nwrite_csv2(df, \"/path/to/myfile.csv\")\nwrite_tsv(df, \"/path/to/myfile.tsv\")\nwrite_delim(df, \"/path/to/myfile.tab\")\n```\n:::\n\n\nFor example, you could export the `mtcars` data frame in  tab-delimited and comma-delimited files on your desktop:\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-7_b5040d45b6a465a922918e279a05f272'}\n\n```{.r .cell-code}\nwrite_delim(mtcars, \"~/Desktop/mtcars.tab\")\nwrite_csv(mtcars, \"~/Desktop/mtcars.csv\")\n```\n:::\n\n\n## What is a `tibble`?\n\nIn base R, the main object holding **sheet-like data** is called a `data.frame`. In the `tidyverse` ecosystem, they are called `tibble`, which can be seen as **a pimped version** of a `data.frame`.\n\n:::: {.columns .small}\n\n::: {.column width='50%' .fragment}\n\n**This is a `data.frame`**\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-8_6eea0cad62517db8965ec2ce317f0b29'}\n\n```{.r .cell-code}\nhead(mtcars[, 1:5], 12)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   mpg cyl  disp  hp drat\nMazda RX4         21.0   6 160.0 110 3.90\nMazda RX4 Wag     21.0   6 160.0 110 3.90\nDatsun 710        22.8   4 108.0  93 3.85\nHornet 4 Drive    21.4   6 258.0 110 3.08\nHornet Sportabout 18.7   8 360.0 175 3.15\nValiant           18.1   6 225.0 105 2.76\nDuster 360        14.3   8 360.0 245 3.21\nMerc 240D         24.4   4 146.7  62 3.69\nMerc 230          22.8   4 140.8  95 3.92\nMerc 280          19.2   6 167.6 123 3.92\nMerc 280C         17.8   6 167.6 123 3.92\nMerc 450SE        16.4   8 275.8 180 3.07\n```\n:::\n:::\n\n:::\n\n::: {.column width='50%' .fragment}\n\n**This is a `tibble`**\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-9_732c5726dd515a4f818582bf603f1b6c'}\n\n```{.r .cell-code}\nhead(as_tibble(mtcars[, 1:5], rownames = \"model\"), 12)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 6\n   model               mpg   cyl  disp    hp  drat\n   <chr>             <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 Mazda RX4          21       6  160    110  3.9 \n 2 Mazda RX4 Wag      21       6  160    110  3.9 \n 3 Datsun 710         22.8     4  108     93  3.85\n 4 Hornet 4 Drive     21.4     6  258    110  3.08\n 5 Hornet Sportabout  18.7     8  360    175  3.15\n 6 Valiant            18.1     6  225    105  2.76\n 7 Duster 360         14.3     8  360    245  3.21\n 8 Merc 240D          24.4     4  147.    62  3.69\n 9 Merc 230           22.8     4  141.    95  3.92\n10 Merc 280           19.2     6  168.   123  3.92\n11 Merc 280C          17.8     6  168.   123  3.92\n12 Merc 450SE         16.4     8  276.   180  3.07\n```\n:::\n:::\n\n:::\n\n::::\n\n## Reading CSV files (an example)\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-10_9fb3aab7e2865b7d96b529da9dbec98c'}\n\n:::\n\n\n:::: {.columns .small}\n\n::: {.column width=\"50%\"}\n\n[Reading using base R creates a `data frame`]{style=\"font-size:1.3em;\"}\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-11_5dd732b51d42abe2384d7cc9a2daf281'}\n\n```{.r .cell-code}\nread.csv(\"data/usarrests.csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            state Murder Assault UrbanPop Rape\n1         Alabama   13.2     236       58 21.2\n2          Alaska   10.0     263       48 44.5\n3         Arizona    8.1     294       80 31.0\n4        Arkansas    8.8     190       50 19.5\n5      California    9.0     276       91 40.6\n6        Colorado    7.9     204       78 38.7\n7     Connecticut    3.3     110       77 11.1\n8        Delaware    5.9     238       72 15.8\n9         Florida   15.4     335       80 31.9\n10        Georgia   17.4     211       60 25.8\n11         Hawaii    5.3      46       83 20.2\n12          Idaho    2.6     120       54 14.2\n13       Illinois   10.4     249       83 24.0\n14        Indiana    7.2     113       65 21.0\n15           Iowa    2.2      56       57 11.3\n16         Kansas    6.0     115       66 18.0\n17       Kentucky    9.7     109       52 16.3\n18      Louisiana   15.4     249       66 22.2\n19          Maine    2.1      83       51  7.8\n20       Maryland   11.3     300       67 27.8\n21  Massachusetts    4.4     149       85 16.3\n22       Michigan   12.1     255       74 35.1\n23      Minnesota    2.7      72       66 14.9\n24    Mississippi   16.1     259       44 17.1\n25       Missouri    9.0     178       70 28.2\n26        Montana    6.0     109       53 16.4\n27       Nebraska    4.3     102       62 16.5\n28         Nevada   12.2     252       81 46.0\n29  New Hampshire    2.1      57       56  9.5\n30     New Jersey    7.4     159       89 18.8\n31     New Mexico   11.4     285       70 32.1\n32       New York   11.1     254       86 26.1\n33 North Carolina   13.0     337       45 16.1\n34   North Dakota    0.8      45       44  7.3\n35           Ohio    7.3     120       75 21.4\n36       Oklahoma    6.6     151       68 20.0\n37         Oregon    4.9     159       67 29.3\n38   Pennsylvania    6.3     106       72 14.9\n39   Rhode Island    3.4     174       87  8.3\n40 South Carolina   14.4     279       48 22.5\n41   South Dakota    3.8      86       45 12.8\n42      Tennessee   13.2     188       59 26.9\n43          Texas   12.7     201       80 25.5\n44           Utah    3.2     120       80 22.9\n45        Vermont    2.2      48       32 11.2\n46       Virginia    8.5     156       63 20.7\n47     Washington    4.0     145       73 26.2\n48  West Virginia    5.7      81       39  9.3\n49      Wisconsin    2.6      53       66 10.8\n50        Wyoming    6.8     161       60 15.6\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n[Reading using `readr` creates a `tibble`]{style=\"font-size:1.3em;\"}\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-12_f8022e0334b8997ea2bad020f0f33913'}\n\n```{.r .cell-code}\nread_csv(\"data/usarrests.csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 × 5\n   state       Murder Assault UrbanPop  Rape\n   <chr>        <dbl>   <dbl>    <dbl> <dbl>\n 1 Alabama       13.2     236       58  21.2\n 2 Alaska        10       263       48  44.5\n 3 Arizona        8.1     294       80  31  \n 4 Arkansas       8.8     190       50  19.5\n 5 California     9       276       91  40.6\n 6 Colorado       7.9     204       78  38.7\n 7 Connecticut    3.3     110       77  11.1\n 8 Delaware       5.9     238       72  15.8\n 9 Florida       15.4     335       80  31.9\n10 Georgia       17.4     211       60  25.8\n# … with 40 more rows\n```\n:::\n:::\n\n:::\n\n::::\n\n## Importing data\n\nYour turn: try reading the data (CSV file) located at this location: \n\n[https://bit.ly/2U487zA](https://bit.ly/2U487zA){style=\"font-size:2em;\"}\n\n. . .\n\n:::: {.columns .small}\n\n::: {.column width='35%'}\n\nThis command reads the data, but does not assign it to a variable.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-13_4b9d20bcbba193b8a0531f5db6e3da85'}\n\n```{.r .cell-code}\nlibrary(readr)\n\nread_csv(\"https://bit.ly/2U487zA\")\n```\n:::\n\n:::\n\n::: {.column width='65%'}\n\nUse the [**<-**]{style=\"font-family:ubuntu;\"} operator to create a new variable (ex.: `df`).\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-14_772491aba013e060fff773bd55fceb70'}\n\n```{.r .cell-code}\nlibrary(readr)\n\ndf <- read_csv(\"https://bit.ly/2U487zA\")\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 891 × 12\n   PassengerId Survived Pclass Name   Sex     Age SibSp Parch Ticket  Fare Cabin\n         <dbl>    <dbl>  <dbl> <chr>  <chr> <dbl> <dbl> <dbl> <chr>  <dbl> <chr>\n 1           1        0      3 Braun… male     22     1     0 A/5 2…  7.25 <NA> \n 2           2        1      1 Cumin… fema…    38     1     0 PC 17… 71.3  C85  \n 3           3        1      3 Heikk… fema…    26     0     0 STON/…  7.92 <NA> \n 4           4        1      1 Futre… fema…    35     1     0 113803 53.1  C123 \n 5           5        0      3 Allen… male     35     0     0 373450  8.05 <NA> \n 6           6        0      3 Moran… male     NA     0     0 330877  8.46 <NA> \n 7           7        0      1 McCar… male     54     0     0 17463  51.9  E46  \n 8           8        0      3 Palss… male      2     3     1 349909 21.1  <NA> \n 9           9        1      3 Johns… fema…    27     0     2 347742 11.1  <NA> \n10          10        1      2 Nasse… fema…    14     1     0 237736 30.1  <NA> \n# … with 881 more rows, and 1 more variable: Embarked <chr>\n```\n:::\n:::\n\n:::\n\n::::\n\n\n# Manipulating data in R {background-color=\"#2C404A\"}\n\n## Data manipulation\n\nThere are two main characteristics of good data manipulation:\n\n. . .\n\n1. **speed**: results are returned in a reasonable time\n\n. . .\n\n2. **elegance**: easy to use and to understand what the code is doing\n\n. . .\n\n> The **tidyverse** is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.\n\n## The tidyverse\n\nThe tidyverse provides a set of packages which provides flexible tools for data manipulation.\n\n<center>\n<img src=\"https://tidyverse.tidyverse.org/logo.png\" width=\"400\"/>\n</center>\n\n<center>\n<img src=\"https://dplyr.tidyverse.org/logo.png\" width=\"200\"/> <img src=\"https://tidyr.tidyverse.org/logo.png\" width=\"200\"/> <img src=\"https://readr.tidyverse.org/logo.png\" width=\"200\"/> <img src=\"https://readxl.tidyverse.org/logo.png\" width=\"200\"/> <img src=\"https://ggplot2.tidyverse.org/logo.png\" width=\"200\"/><img src=\"https://stringr.tidyverse.org/logo.png\" width=\"200\"/><img src=\"https://lubridate.tidyverse.org/logo.png\" width=\"200\"/>\n</center>\n\n## The tidyverse\n\nThe package is not included in the base installation of R.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-15_e0a56d1e8306334b9aaaafd437b3d6b0'}\n\n```{.r .cell-code}\n# Install the tidyverse packages\ninstall.packages(\"tidyverse\")\n```\n:::\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-16_07be81bcca143213b70f0542d2d7ac4d'}\n\n```{.r .cell-code}\n# Load all the packages included in tidyverse\nlibrary(tidyverse)\n```\n:::\n\n\nYou can refer to the printed **cheat sheet** for an overview of the package's functions.\n\n# Data manipulation with {dplyr} {background-color=\"#2C404A\"}\n\n## dplyr\n\n> dplyr is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges\n\nAll `dplyr` functions use the same scheme: **the first argument to provide is a data frame**.\n\n| **Function**       | **Definition**                                                                                                       |\n|------------------------|-----------------------------------------------|\n| `filter(df, ...)`    | Select a subset of the rows of a data frame.                                                                         |\n| `arrange(df, ...)`   | Reorder rows of a data frame.                                                                                        |\n| `select(df, ...)`    | Select columns of a data frame.                                                                                      |\n| `mutate(df, ...)`    | Add or modify columns in a data frame.                                                                                     |\n| `summarise(df, ...)` | Summarize a data frame into a single row. This function is very helpful in combination with the `group_by()` function. |\n| `group_by(df, ...)`  | Group a data frame based on the specified columns.                                                                   |\n\n: Useful functions {tbl-colwidths=\"[25,75]\"} \n\n## The `nycflights13` datasets\n\n::: {.incremental}\n\n- To learn how to use these functions, we will use datasets from package `nycflights13`.\n\n- This package contains information about all flights that departed from New York airports (i.e., **EWR**, **JFK** and **LGA**) in 2013.\n\n- Not included in base R, we first need to install it.\n\n:::\n\n. . .\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-17_d0e28e2c13a4f7251134e3cc4e761032'}\n\n```{.r .cell-code}\n# Install the dataset package\ninstall.packages(\"nycflights13\")\n```\n:::\n\n\n## Relationships\n\n <figure>\n  <center>\n  <img src=\"https://bookdown.org/asmundhreinn/r4ds-master/diagrams/relational-nycflights.png\" alt=\"Trulli\" style=\"width:50%\">\n  <figcaption>Source: [R for Data Science](https://bookdown.org/asmundhreinn/r4ds-master/)</figcaption>\n  </center>\n</figure>\n\n- The `flights` table connects to planes via a single variable, `tailnum`.\n- The `flights` table connects to `airports` in two ways: via the `origin` and `dest` variables.\n\n## nycflights13\n\nFor the following examples we are going to use **fights**, **planes**, **airports**, **airlines** tables.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-18_143237c2a1c1b3f9b10253e136298191'}\n\n```{.r .cell-code}\n# Libraries for data manipulation and visualization\nlibrary(tidyverse)\n\n# Load the data package\nlibrary(nycflights13)\n\n# Loads all the five data frame included in nycflights13\ndata(flights)\ndata(planes)\ndata(airports)\ndata(airlines)\ndata(weather)\n```\n:::\n\n\n## The `flights` table\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-19_6692a5b22b5b51bcd85e45b007d1ea3e'}\n\n```{.r .cell-code}\nglimpse(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n```\n:::\n:::\n\n\n## The `flights` table\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-20_c5702150a9c7f15aea202ef61f96f7e4'}\n::: {.cell-output-display}\n```{=html}\n<div id=\"enezyncepu\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#enezyncepu .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#enezyncepu .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#enezyncepu .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#enezyncepu .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#enezyncepu .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#enezyncepu .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#enezyncepu .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#enezyncepu .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#enezyncepu .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#enezyncepu .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#enezyncepu .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#enezyncepu .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#enezyncepu .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#enezyncepu .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#enezyncepu .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#enezyncepu .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#enezyncepu .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#enezyncepu .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#enezyncepu .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#enezyncepu .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#enezyncepu .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#enezyncepu .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#enezyncepu .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#enezyncepu .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#enezyncepu .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#enezyncepu .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#enezyncepu .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#enezyncepu .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#enezyncepu .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#enezyncepu .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#enezyncepu .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#enezyncepu .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#enezyncepu .gt_left {\n  text-align: left;\n}\n\n#enezyncepu .gt_center {\n  text-align: center;\n}\n\n#enezyncepu .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#enezyncepu .gt_font_normal {\n  font-weight: normal;\n}\n\n#enezyncepu .gt_font_bold {\n  font-weight: bold;\n}\n\n#enezyncepu .gt_font_italic {\n  font-style: italic;\n}\n\n#enezyncepu .gt_super {\n  font-size: 65%;\n}\n\n#enezyncepu .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#enezyncepu .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#enezyncepu .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#enezyncepu .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#enezyncepu .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#enezyncepu .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#enezyncepu .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"year\">year</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"month\">month</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"day\">day</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"dep_time\">dep_time</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"sched_dep_time\">sched_dep_time</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"dep_delay\">dep_delay</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"arr_time\">arr_time</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"sched_arr_time\">sched_arr_time</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"arr_delay\">arr_delay</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"carrier\">carrier</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"flight\">flight</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"tailnum\">tailnum</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"origin\">origin</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"dest\">dest</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"air_time\">air_time</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"distance\">distance</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"hour\">hour</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"minute\">minute</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"time_hour\">time_hour</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"year\" class=\"gt_row gt_right\">2013</td>\n<td headers=\"month\" class=\"gt_row gt_right\">1</td>\n<td headers=\"day\" class=\"gt_row gt_right\">1</td>\n<td headers=\"dep_time\" class=\"gt_row gt_right\">517</td>\n<td headers=\"sched_dep_time\" class=\"gt_row gt_right\">515</td>\n<td headers=\"dep_delay\" class=\"gt_row gt_right\">2</td>\n<td headers=\"arr_time\" class=\"gt_row gt_right\">830</td>\n<td headers=\"sched_arr_time\" class=\"gt_row gt_right\">819</td>\n<td headers=\"arr_delay\" class=\"gt_row gt_right\">11</td>\n<td headers=\"carrier\" class=\"gt_row gt_left\">UA</td>\n<td headers=\"flight\" class=\"gt_row gt_right\">1545</td>\n<td headers=\"tailnum\" class=\"gt_row gt_left\">N14228</td>\n<td headers=\"origin\" class=\"gt_row gt_left\">EWR</td>\n<td headers=\"dest\" class=\"gt_row gt_left\">IAH</td>\n<td headers=\"air_time\" class=\"gt_row gt_right\">227</td>\n<td headers=\"distance\" class=\"gt_row gt_right\">1400</td>\n<td headers=\"hour\" class=\"gt_row gt_right\">5</td>\n<td headers=\"minute\" class=\"gt_row gt_right\">15</td>\n<td headers=\"time_hour\" class=\"gt_row gt_right\">2013-01-01 05:00:00</td></tr>\n    <tr><td headers=\"year\" class=\"gt_row gt_right\">2013</td>\n<td headers=\"month\" class=\"gt_row gt_right\">1</td>\n<td headers=\"day\" class=\"gt_row gt_right\">1</td>\n<td headers=\"dep_time\" class=\"gt_row gt_right\">533</td>\n<td headers=\"sched_dep_time\" class=\"gt_row gt_right\">529</td>\n<td headers=\"dep_delay\" class=\"gt_row gt_right\">4</td>\n<td headers=\"arr_time\" class=\"gt_row gt_right\">850</td>\n<td headers=\"sched_arr_time\" class=\"gt_row gt_right\">830</td>\n<td headers=\"arr_delay\" class=\"gt_row gt_right\">20</td>\n<td headers=\"carrier\" class=\"gt_row gt_left\">UA</td>\n<td headers=\"flight\" class=\"gt_row gt_right\">1714</td>\n<td headers=\"tailnum\" class=\"gt_row gt_left\">N24211</td>\n<td headers=\"origin\" class=\"gt_row gt_left\">LGA</td>\n<td headers=\"dest\" class=\"gt_row gt_left\">IAH</td>\n<td headers=\"air_time\" class=\"gt_row gt_right\">227</td>\n<td headers=\"distance\" class=\"gt_row gt_right\">1416</td>\n<td headers=\"hour\" class=\"gt_row gt_right\">5</td>\n<td headers=\"minute\" class=\"gt_row gt_right\">29</td>\n<td headers=\"time_hour\" class=\"gt_row gt_right\">2013-01-01 05:00:00</td></tr>\n    <tr><td headers=\"year\" class=\"gt_row gt_right\">2013</td>\n<td headers=\"month\" class=\"gt_row gt_right\">1</td>\n<td headers=\"day\" class=\"gt_row gt_right\">1</td>\n<td headers=\"dep_time\" class=\"gt_row gt_right\">542</td>\n<td headers=\"sched_dep_time\" class=\"gt_row gt_right\">540</td>\n<td headers=\"dep_delay\" class=\"gt_row gt_right\">2</td>\n<td headers=\"arr_time\" class=\"gt_row gt_right\">923</td>\n<td headers=\"sched_arr_time\" class=\"gt_row gt_right\">850</td>\n<td headers=\"arr_delay\" class=\"gt_row gt_right\">33</td>\n<td headers=\"carrier\" class=\"gt_row gt_left\">AA</td>\n<td headers=\"flight\" class=\"gt_row gt_right\">1141</td>\n<td headers=\"tailnum\" class=\"gt_row gt_left\">N619AA</td>\n<td headers=\"origin\" class=\"gt_row gt_left\">JFK</td>\n<td headers=\"dest\" class=\"gt_row gt_left\">MIA</td>\n<td headers=\"air_time\" class=\"gt_row gt_right\">160</td>\n<td headers=\"distance\" class=\"gt_row gt_right\">1089</td>\n<td headers=\"hour\" class=\"gt_row gt_right\">5</td>\n<td headers=\"minute\" class=\"gt_row gt_right\">40</td>\n<td headers=\"time_hour\" class=\"gt_row gt_right\">2013-01-01 05:00:00</td></tr>\n    <tr><td headers=\"year\" class=\"gt_row gt_right\">2013</td>\n<td headers=\"month\" class=\"gt_row gt_right\">1</td>\n<td headers=\"day\" class=\"gt_row gt_right\">1</td>\n<td headers=\"dep_time\" class=\"gt_row gt_right\">544</td>\n<td headers=\"sched_dep_time\" class=\"gt_row gt_right\">545</td>\n<td headers=\"dep_delay\" class=\"gt_row gt_right\">-1</td>\n<td headers=\"arr_time\" class=\"gt_row gt_right\">1004</td>\n<td headers=\"sched_arr_time\" class=\"gt_row gt_right\">1022</td>\n<td headers=\"arr_delay\" class=\"gt_row gt_right\">-18</td>\n<td headers=\"carrier\" class=\"gt_row gt_left\">B6</td>\n<td headers=\"flight\" class=\"gt_row gt_right\">725</td>\n<td headers=\"tailnum\" class=\"gt_row gt_left\">N804JB</td>\n<td headers=\"origin\" class=\"gt_row gt_left\">JFK</td>\n<td headers=\"dest\" class=\"gt_row gt_left\">BQN</td>\n<td headers=\"air_time\" class=\"gt_row gt_right\">183</td>\n<td headers=\"distance\" class=\"gt_row gt_right\">1576</td>\n<td headers=\"hour\" class=\"gt_row gt_right\">5</td>\n<td headers=\"minute\" class=\"gt_row gt_right\">45</td>\n<td headers=\"time_hour\" class=\"gt_row gt_right\">2013-01-01 05:00:00</td></tr>\n    <tr><td headers=\"year\" class=\"gt_row gt_right\">2013</td>\n<td headers=\"month\" class=\"gt_row gt_right\">1</td>\n<td headers=\"day\" class=\"gt_row gt_right\">1</td>\n<td headers=\"dep_time\" class=\"gt_row gt_right\">554</td>\n<td headers=\"sched_dep_time\" class=\"gt_row gt_right\">600</td>\n<td headers=\"dep_delay\" class=\"gt_row gt_right\">-6</td>\n<td headers=\"arr_time\" class=\"gt_row gt_right\">812</td>\n<td headers=\"sched_arr_time\" class=\"gt_row gt_right\">837</td>\n<td headers=\"arr_delay\" class=\"gt_row gt_right\">-25</td>\n<td headers=\"carrier\" class=\"gt_row gt_left\">DL</td>\n<td headers=\"flight\" class=\"gt_row gt_right\">461</td>\n<td headers=\"tailnum\" class=\"gt_row gt_left\">N668DN</td>\n<td headers=\"origin\" class=\"gt_row gt_left\">LGA</td>\n<td headers=\"dest\" class=\"gt_row gt_left\">ATL</td>\n<td headers=\"air_time\" class=\"gt_row gt_right\">116</td>\n<td headers=\"distance\" class=\"gt_row gt_right\">762</td>\n<td headers=\"hour\" class=\"gt_row gt_right\">6</td>\n<td headers=\"minute\" class=\"gt_row gt_right\">0</td>\n<td headers=\"time_hour\" class=\"gt_row gt_right\">2013-01-01 06:00:00</td></tr>\n    <tr><td headers=\"year\" class=\"gt_row gt_right\">2013</td>\n<td headers=\"month\" class=\"gt_row gt_right\">1</td>\n<td headers=\"day\" class=\"gt_row gt_right\">1</td>\n<td headers=\"dep_time\" class=\"gt_row gt_right\">554</td>\n<td headers=\"sched_dep_time\" class=\"gt_row gt_right\">558</td>\n<td headers=\"dep_delay\" class=\"gt_row gt_right\">-4</td>\n<td headers=\"arr_time\" class=\"gt_row gt_right\">740</td>\n<td headers=\"sched_arr_time\" class=\"gt_row gt_right\">728</td>\n<td headers=\"arr_delay\" class=\"gt_row gt_right\">12</td>\n<td headers=\"carrier\" class=\"gt_row gt_left\">UA</td>\n<td headers=\"flight\" class=\"gt_row gt_right\">1696</td>\n<td headers=\"tailnum\" class=\"gt_row gt_left\">N39463</td>\n<td headers=\"origin\" class=\"gt_row gt_left\">EWR</td>\n<td headers=\"dest\" class=\"gt_row gt_left\">ORD</td>\n<td headers=\"air_time\" class=\"gt_row gt_right\">150</td>\n<td headers=\"distance\" class=\"gt_row gt_right\">719</td>\n<td headers=\"hour\" class=\"gt_row gt_right\">5</td>\n<td headers=\"minute\" class=\"gt_row gt_right\">58</td>\n<td headers=\"time_hour\" class=\"gt_row gt_right\">2013-01-01 05:00:00</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\n## The `planes` table\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-21_9276ad09e8b72127a80ab14127399922'}\n\n```{.r .cell-code}\nglimpse(planes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 3,322\nColumns: 9\n$ tailnum      <chr> \"N10156\", \"N102UW\", \"N103US\", \"N104UW\", \"N10575\", \"N105UW…\n$ year         <int> 2004, 1998, 1999, 1999, 2002, 1999, 1999, 1999, 1999, 199…\n$ type         <chr> \"Fixed wing multi engine\", \"Fixed wing multi engine\", \"Fi…\n$ manufacturer <chr> \"EMBRAER\", \"AIRBUS INDUSTRIE\", \"AIRBUS INDUSTRIE\", \"AIRBU…\n$ model        <chr> \"EMB-145XR\", \"A320-214\", \"A320-214\", \"A320-214\", \"EMB-145…\n$ engines      <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n$ seats        <int> 55, 182, 182, 182, 55, 182, 182, 182, 182, 182, 55, 55, 5…\n$ speed        <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ engine       <chr> \"Turbo-fan\", \"Turbo-fan\", \"Turbo-fan\", \"Turbo-fan\", \"Turb…\n```\n:::\n:::\n\n\n## The `planes` table\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-22_86ba9d5396e082df013651e302dad965'}\n::: {.cell-output-display}\n```{=html}\n<div id=\"iyqlqotftp\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#iyqlqotftp .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#iyqlqotftp .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#iyqlqotftp .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#iyqlqotftp .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#iyqlqotftp .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#iyqlqotftp .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#iyqlqotftp .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#iyqlqotftp .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#iyqlqotftp .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#iyqlqotftp .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#iyqlqotftp .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#iyqlqotftp .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#iyqlqotftp .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#iyqlqotftp .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#iyqlqotftp .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#iyqlqotftp .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#iyqlqotftp .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#iyqlqotftp .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#iyqlqotftp .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#iyqlqotftp .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#iyqlqotftp .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#iyqlqotftp .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#iyqlqotftp .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#iyqlqotftp .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#iyqlqotftp .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#iyqlqotftp .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#iyqlqotftp .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#iyqlqotftp .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#iyqlqotftp .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#iyqlqotftp .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#iyqlqotftp .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#iyqlqotftp .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#iyqlqotftp .gt_left {\n  text-align: left;\n}\n\n#iyqlqotftp .gt_center {\n  text-align: center;\n}\n\n#iyqlqotftp .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#iyqlqotftp .gt_font_normal {\n  font-weight: normal;\n}\n\n#iyqlqotftp .gt_font_bold {\n  font-weight: bold;\n}\n\n#iyqlqotftp .gt_font_italic {\n  font-style: italic;\n}\n\n#iyqlqotftp .gt_super {\n  font-size: 65%;\n}\n\n#iyqlqotftp .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#iyqlqotftp .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#iyqlqotftp .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#iyqlqotftp .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#iyqlqotftp .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#iyqlqotftp .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#iyqlqotftp .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"tailnum\">tailnum</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"year\">year</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"type\">type</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"manufacturer\">manufacturer</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"model\">model</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"engines\">engines</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"seats\">seats</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"speed\">speed</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"engine\">engine</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"tailnum\" class=\"gt_row gt_left\">N10156</td>\n<td headers=\"year\" class=\"gt_row gt_right\">2004</td>\n<td headers=\"type\" class=\"gt_row gt_left\">Fixed wing multi engine</td>\n<td headers=\"manufacturer\" class=\"gt_row gt_left\">EMBRAER</td>\n<td headers=\"model\" class=\"gt_row gt_left\">EMB-145XR</td>\n<td headers=\"engines\" class=\"gt_row gt_right\">2</td>\n<td headers=\"seats\" class=\"gt_row gt_right\">55</td>\n<td headers=\"speed\" class=\"gt_row gt_right\">NA</td>\n<td headers=\"engine\" class=\"gt_row gt_left\">Turbo-fan</td></tr>\n    <tr><td headers=\"tailnum\" class=\"gt_row gt_left\">N102UW</td>\n<td headers=\"year\" class=\"gt_row gt_right\">1998</td>\n<td headers=\"type\" class=\"gt_row gt_left\">Fixed wing multi engine</td>\n<td headers=\"manufacturer\" class=\"gt_row gt_left\">AIRBUS INDUSTRIE</td>\n<td headers=\"model\" class=\"gt_row gt_left\">A320-214</td>\n<td headers=\"engines\" class=\"gt_row gt_right\">2</td>\n<td headers=\"seats\" class=\"gt_row gt_right\">182</td>\n<td headers=\"speed\" class=\"gt_row gt_right\">NA</td>\n<td headers=\"engine\" class=\"gt_row gt_left\">Turbo-fan</td></tr>\n    <tr><td headers=\"tailnum\" class=\"gt_row gt_left\">N103US</td>\n<td headers=\"year\" class=\"gt_row gt_right\">1999</td>\n<td headers=\"type\" class=\"gt_row gt_left\">Fixed wing multi engine</td>\n<td headers=\"manufacturer\" class=\"gt_row gt_left\">AIRBUS INDUSTRIE</td>\n<td headers=\"model\" class=\"gt_row gt_left\">A320-214</td>\n<td headers=\"engines\" class=\"gt_row gt_right\">2</td>\n<td headers=\"seats\" class=\"gt_row gt_right\">182</td>\n<td headers=\"speed\" class=\"gt_row gt_right\">NA</td>\n<td headers=\"engine\" class=\"gt_row gt_left\">Turbo-fan</td></tr>\n    <tr><td headers=\"tailnum\" class=\"gt_row gt_left\">N104UW</td>\n<td headers=\"year\" class=\"gt_row gt_right\">1999</td>\n<td headers=\"type\" class=\"gt_row gt_left\">Fixed wing multi engine</td>\n<td headers=\"manufacturer\" class=\"gt_row gt_left\">AIRBUS INDUSTRIE</td>\n<td headers=\"model\" class=\"gt_row gt_left\">A320-214</td>\n<td headers=\"engines\" class=\"gt_row gt_right\">2</td>\n<td headers=\"seats\" class=\"gt_row gt_right\">182</td>\n<td headers=\"speed\" class=\"gt_row gt_right\">NA</td>\n<td headers=\"engine\" class=\"gt_row gt_left\">Turbo-fan</td></tr>\n    <tr><td headers=\"tailnum\" class=\"gt_row gt_left\">N10575</td>\n<td headers=\"year\" class=\"gt_row gt_right\">2002</td>\n<td headers=\"type\" class=\"gt_row gt_left\">Fixed wing multi engine</td>\n<td headers=\"manufacturer\" class=\"gt_row gt_left\">EMBRAER</td>\n<td headers=\"model\" class=\"gt_row gt_left\">EMB-145LR</td>\n<td headers=\"engines\" class=\"gt_row gt_right\">2</td>\n<td headers=\"seats\" class=\"gt_row gt_right\">55</td>\n<td headers=\"speed\" class=\"gt_row gt_right\">NA</td>\n<td headers=\"engine\" class=\"gt_row gt_left\">Turbo-fan</td></tr>\n    <tr><td headers=\"tailnum\" class=\"gt_row gt_left\">N105UW</td>\n<td headers=\"year\" class=\"gt_row gt_right\">1999</td>\n<td headers=\"type\" class=\"gt_row gt_left\">Fixed wing multi engine</td>\n<td headers=\"manufacturer\" class=\"gt_row gt_left\">AIRBUS INDUSTRIE</td>\n<td headers=\"model\" class=\"gt_row gt_left\">A320-214</td>\n<td headers=\"engines\" class=\"gt_row gt_right\">2</td>\n<td headers=\"seats\" class=\"gt_row gt_right\">182</td>\n<td headers=\"speed\" class=\"gt_row gt_right\">NA</td>\n<td headers=\"engine\" class=\"gt_row gt_left\">Turbo-fan</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\n## The `airports` table\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-23_e972c5e325b295d1e1d7b02f189d8085'}\n\n```{.r .cell-code}\nglimpse(airports)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,458\nColumns: 8\n$ faa   <chr> \"04G\", \"06A\", \"06C\", \"06N\", \"09J\", \"0A9\", \"0G6\", \"0G7\", \"0P2\", \"…\n$ name  <chr> \"Lansdowne Airport\", \"Moton Field Municipal Airport\", \"Schaumbur…\n$ lat   <dbl> 41.13047, 32.46057, 41.98934, 41.43191, 31.07447, 36.37122, 41.4…\n$ lon   <dbl> -80.61958, -85.68003, -88.10124, -74.39156, -81.42778, -82.17342…\n$ alt   <dbl> 1044, 264, 801, 523, 11, 1593, 730, 492, 1000, 108, 409, 875, 10…\n$ tz    <dbl> -5, -6, -6, -5, -5, -5, -5, -5, -5, -8, -5, -6, -5, -5, -5, -5, …\n$ dst   <chr> \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"U\", \"A\", \"A\", \"U\", \"A\",…\n$ tzone <chr> \"America/New_York\", \"America/Chicago\", \"America/Chicago\", \"Ameri…\n```\n:::\n:::\n\n\n## The `airlines` table\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-24_be19c15871945240509cdf8312020957'}\n\n```{.r .cell-code}\nglimpse(airlines)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 16\nColumns: 2\n$ carrier <chr> \"9E\", \"AA\", \"AS\", \"B6\", \"DL\", \"EV\", \"F9\", \"FL\", \"HA\", \"MQ\", \"O…\n$ name    <chr> \"Endeavor Air Inc.\", \"American Airlines Inc.\", \"Alaska Airline…\n```\n:::\n:::\n\n\n## The `weather` table\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-25_3027d7629eccff84ad0b387ce72b4814'}\n\n```{.r .cell-code}\nglimpse(weather)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 26,115\nColumns: 15\n$ origin     <chr> \"EWR\", \"EWR\", \"EWR\", \"EWR\", \"EWR\", \"EWR\", \"EWR\", \"EWR\", \"EW…\n$ year       <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013,…\n$ month      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ day        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ hour       <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, …\n$ temp       <dbl> 39.02, 39.02, 39.02, 39.92, 39.02, 37.94, 39.02, 39.92, 39.…\n$ dewp       <dbl> 26.06, 26.96, 28.04, 28.04, 28.04, 28.04, 28.04, 28.04, 28.…\n$ humid      <dbl> 59.37, 61.63, 64.43, 62.21, 64.43, 67.21, 64.43, 62.21, 62.…\n$ wind_dir   <dbl> 270, 250, 240, 250, 260, 240, 240, 250, 260, 260, 260, 330,…\n$ wind_speed <dbl> 10.35702, 8.05546, 11.50780, 12.65858, 12.65858, 11.50780, …\n$ wind_gust  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 20.…\n$ precip     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ pressure   <dbl> 1012.0, 1012.3, 1012.5, 1012.2, 1011.9, 1012.4, 1012.2, 101…\n$ visib      <dbl> 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,…\n$ time_hour  <dttm> 2013-01-01 01:00:00, 2013-01-01 02:00:00, 2013-01-01 03:00…\n```\n:::\n:::\n\n\n## Getting more information\n\nIf you want more information on a specific table, use the `?` operator. This will open the help file and describe all variables included in the data frame.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-26_c49bc393aa596ca3bc9a10f455014890'}\n\n```{.r .cell-code}\n?flights\n\n?planes\n\n?airports\n\n?airlines\n\n?weather\n```\n:::\n\n\n## The `filter()` function\n\n- The `filter()` allows you to select a subset of the rows of a data frame. \n\n- The first argument is the name of the data frame, and the second and subsequent are filtering expressions evaluated in the context of that data frame.\n\n![](images/functions/filter.png)\n\n## The `filter()` function\n\nExample 1: select all flights with a tail number equal to \"**N14228**\".\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-27_76b22a45699be4963e1415a61cd272ee'}\n\n```{.r .cell-code}\nfilter(flights, tailnum == \"N14228\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 111 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     8     1435       1440      -5    1717    1746     -29 UA     \n 3  2013     1     9      717        700      17     812     815      -3 UA     \n 4  2013     1     9     1143       1144      -1    1425    1445     -20 UA     \n 5  2013     1    13      835        824      11    1030     951      39 UA     \n 6  2013     1    16     1829       1730      59    2117    2023      54 UA     \n 7  2013     1    22     1902       1808      54    2214    2106      68 UA     \n 8  2013     1    23     1050       1056      -6    1143    1208     -25 UA     \n 9  2013     1    23     1533       1529       4    1641    1645      -4 UA     \n10  2013     1    25      724        720       4    1000    1023     -23 UA     \n# … with 101 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n## The `filter()` function\n\nExample 2: select all flights with a departure delay greater than 180 minutes.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-28_d03e5a6ae9d10496b0f5f35b5428e6ee'}\n\n```{.r .cell-code}\nfilter(flights, dep_delay > 180)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3,893 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      848       1835     853    1001    1950     851 MQ     \n 2  2013     1     1     1815       1325     290    2120    1542     338 EV     \n 3  2013     1     1     1842       1422     260    1958    1535     263 EV     \n 4  2013     1     1     2006       1630     216    2230    1848     222 EV     \n 5  2013     1     1     2115       1700     255    2330    1920     250 9E     \n 6  2013     1     1     2205       1720     285      46    2040     246 AA     \n 7  2013     1     1     2312       2000     192      21    2110     191 EV     \n 8  2013     1     1     2343       1724     379     314    1938     456 EV     \n 9  2013     1     2     1244        900     224    1431    1104     207 EV     \n10  2013     1     2     1332        904     268    1616    1128     288 EV     \n# … with 3,883 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n## The `filter()` function\n\nExample 3: select all flights from `carriers` \"**MQ**\" or \"**EV**\".\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-29_515e0fc8b2e11a5e6e54f7a916c0f290'}\n\n```{.r .cell-code}\nfilter(flights, carrier ==  \"MQ\" | carrier == \"EV\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 80,570 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      557        600      -3     709     723     -14 EV     \n 2  2013     1     1      600        600       0     837     825      12 MQ     \n 3  2013     1     1      602        605      -3     821     805      16 MQ     \n 4  2013     1     1      608        600       8     807     735      32 MQ     \n 5  2013     1     1      624        630      -6     909     840      29 EV     \n 6  2013     1     1      624        630      -6     840     830      10 MQ     \n 7  2013     1     1      632        608      24     740     728      12 EV     \n 8  2013     1     1      656        705      -9    1007     940      27 MQ     \n 9  2013     1     1      749        710      39     939     850      49 MQ     \n10  2013     1     1      800        810     -10     949     955      -6 MQ     \n# … with 80,560 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n## The `filter()` function\n\nAnother option using the `%in%` operator.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-30_6551e55aa55d06f85c8d356d0aef896b'}\n\n```{.r .cell-code}\nfilter(flights, carrier %in%  c(\"MQ\", \"EV\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 80,570 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      557        600      -3     709     723     -14 EV     \n 2  2013     1     1      600        600       0     837     825      12 MQ     \n 3  2013     1     1      602        605      -3     821     805      16 MQ     \n 4  2013     1     1      608        600       8     807     735      32 MQ     \n 5  2013     1     1      624        630      -6     909     840      29 EV     \n 6  2013     1     1      624        630      -6     840     830      10 MQ     \n 7  2013     1     1      632        608      24     740     728      12 EV     \n 8  2013     1     1      656        705      -9    1007     940      27 MQ     \n 9  2013     1     1      749        710      39     939     850      49 MQ     \n10  2013     1     1      800        810     -10     949     955      -6 MQ     \n# … with 80,560 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n## The `filter()` function\n\nYour turn: write code that uses the `flights` table and return all the flights with delayed departures between 100 and 200 minutes from the \"**FL**\" carrier.\n\n. . .\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-31_fa9ea0bdd76d50dc44078eb567b1d536'}\n\n```{.r .cell-code}\nfilter(flights, dep_delay >= 100 & dep_delay <= 200 & carrier == \"FL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 127 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1    27     1522       1308     134    1809    1542     147 FL     \n 2  2013     1    30     2300       2030     150      23    2206     137 FL     \n 3  2013    10     7     2132       1859     153    2339    2126     133 FL     \n 4  2013    10     7     2240       2030     130    2356    2201     115 FL     \n 5  2013    10    11     1946       1738     128    2156    2005     111 FL     \n 6  2013    10    11     2144       1859     165    2344    2126     138 FL     \n 7  2013    10    28      956        810     106    1217    1037     100 FL     \n 8  2013    11    12     1937       1729     128    2221    1955     146 FL     \n 9  2013    11    27     1901       1720     101    2144    1948     116 FL     \n10  2013    12     5     2314       2033     161      38    2206     152 FL     \n# … with 117 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n## The `arrange()` function\n\n- `arrange()` reorders the rows of a data frame. \n\n- The function takes a data frame, and a set of column name(s) to order by.\n\n## The `arrange()` function\n\nExample 1: reorder flights on departure month.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-32_ed1278e39397c79b3449dde2abcec297'}\n\n```{.r .cell-code}\narrange(flights, month)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      533        529       4     850     830      20 UA     \n 3  2013     1     1      542        540       2     923     850      33 AA     \n 4  2013     1     1      544        545      -1    1004    1022     -18 B6     \n 5  2013     1     1      554        600      -6     812     837     -25 DL     \n 6  2013     1     1      554        558      -4     740     728      12 UA     \n 7  2013     1     1      555        600      -5     913     854      19 B6     \n 8  2013     1     1      557        600      -3     709     723     -14 EV     \n 9  2013     1     1      557        600      -3     838     846      -8 B6     \n10  2013     1     1      558        600      -2     753     745       8 AA     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n## The `arrange()` function\n\nExample 2: reorder flights on departure month and departure time.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-33_b56927e8b87038981e4c6538d902dfb8'}\n\n```{.r .cell-code}\narrange(flights, month, dep_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1    13        1       2249      72     108    2357      71 B6     \n 2  2013     1    31        1       2100     181     124    2225     179 WN     \n 3  2013     1     9        2       2359       3     432     444     -12 B6     \n 4  2013     1    13        2       2359       3     502     444      18 B6     \n 5  2013     1    16        2       2125     157     119    2250     149 MQ     \n 6  2013     1    10        3       2359       4     426     437     -11 B6     \n 7  2013     1    13        3       2030     213     340    2350     230 B6     \n 8  2013     1    16        3       1946     257     212    2154     258 EV     \n 9  2013     1    30        3       2159     124     100    2306     114 EV     \n10  2013     1    31        4       2359       5     455     444      11 B6     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n## The `arrange()` function\n\nExample 3: reorder flights on departure month and by **decreasing** departure time.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-34_81f60bcf2ad728a6b0c17effec92b9bb'}\n\n```{.r .cell-code}\narrange(flights, month, desc(dep_time))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     7     2359       2359       0     506     437      29 B6     \n 2  2013     1    12     2359       2359       0     429     437      -8 B6     \n 3  2013     1    13     2359       2130     149     435     218     137 B6     \n 4  2013     1    18     2359       2359       0     439     437       2 B6     \n 5  2013     1    19     2359       2359       0     437     444      -7 B6     \n 6  2013     1    25     2359       2359       0     500     444      16 B6     \n 7  2013     1     4     2358       2359      -1     429     437      -8 B6     \n 8  2013     1     4     2358       2359      -1     436     445      -9 B6     \n 9  2013     1    13     2358       2045     193     233    2310     203 B6     \n10  2013     1    16     2358       2359      -1     502     437      25 B6     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n## The `select()` function\n\n- `select()` is used to extract column(s) from a data frame.\n\n- Useful when you want to perform data analysis on specific column(s) and not the complete dataset.\n\n## The `select()` function\n\nExample 1: select \"**faa**\" and \"**name**\" columns from the `airports` data frame.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-35_5c2bfb266b7efb3b7a482cc46246e845'}\n\n```{.r .cell-code}\nselect(airports, faa, name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,458 × 2\n   faa   name                          \n   <chr> <chr>                         \n 1 04G   Lansdowne Airport             \n 2 06A   Moton Field Municipal Airport \n 3 06C   Schaumburg Regional           \n 4 06N   Randall Airport               \n 5 09J   Jekyll Island Airport         \n 6 0A9   Elizabethton Municipal Airport\n 7 0G6   Williams County Airport       \n 8 0G7   Finger Lakes Regional Airport \n 9 0P2   Shoestring Aviation Airfield  \n10 0S9   Jefferson County Intl         \n# … with 1,448 more rows\n```\n:::\n:::\n\n\n## The `select()` function\n\nYou can also use `select()` to remove columns with the `-` operator.\n\nExample 2: select all columns from `airports` except \"**faa**\" and \"**name**\".\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-36_1401db6272b09e9f5394c82ffac740b7'}\n\n```{.r .cell-code}\nselect(airports, -faa, -name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,458 × 6\n     lat    lon   alt    tz dst   tzone              \n   <dbl>  <dbl> <dbl> <dbl> <chr> <chr>              \n 1  41.1  -80.6  1044    -5 A     America/New_York   \n 2  32.5  -85.7   264    -6 A     America/Chicago    \n 3  42.0  -88.1   801    -6 A     America/Chicago    \n 4  41.4  -74.4   523    -5 A     America/New_York   \n 5  31.1  -81.4    11    -5 A     America/New_York   \n 6  36.4  -82.2  1593    -5 A     America/New_York   \n 7  41.5  -84.5   730    -5 A     America/New_York   \n 8  42.9  -76.8   492    -5 A     America/New_York   \n 9  39.8  -76.6  1000    -5 U     America/New_York   \n10  48.1 -123.    108    -8 A     America/Los_Angeles\n# … with 1,448 more rows\n```\n:::\n:::\n\n\n## The `select()` function\n\nIt is also possible to select columns using **helper functions**.\n\nExample 3: select \"**year**\", \"**month**\" and all columns that start with \"**dep_**\" from `flights`.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-37_3bc03d7e2a22f4c296621aae5981aa16'}\n\n```{.r .cell-code}\nselect(flights, year, month, starts_with(\"dep_\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 4\n    year month dep_time dep_delay\n   <int> <int>    <int>     <dbl>\n 1  2013     1      517         2\n 2  2013     1      533         4\n 3  2013     1      542         2\n 4  2013     1      544        -1\n 5  2013     1      554        -6\n 6  2013     1      554        -4\n 7  2013     1      555        -5\n 8  2013     1      557        -3\n 9  2013     1      557        -3\n10  2013     1      558        -2\n# … with 336,766 more rows\n```\n:::\n:::\n\n\n## The `mutate()` function\n\n- The `mutate()` function is used to add or modify existing column(s) inside a data frame.\n\n- The function takes a data frame, and one or more expressions that add/modify columns.\n\n## The `mutate()` function\n\nExample 1: add a new column named \"**distance_km**\" which converts the `distance` column, which shows the flight distance in miles, into km.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-38_8b2ff5f7abc9baca06d3d4e1a68c82ea'}\n\n```{.r .cell-code  code-line-numbers=\"1-5|2|3|4|1-5\"}\nmutate(\n  flights, \n  distance_km = distance / 0.62137, \n  .keep = \"used\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 2\n   distance distance_km\n      <dbl>       <dbl>\n 1     1400       2253.\n 2     1416       2279.\n 3     1089       1753.\n 4     1576       2536.\n 5      762       1226.\n 6      719       1157.\n 7     1065       1714.\n 8      229        369.\n 9      944       1519.\n10      733       1180.\n# … with 336,766 more rows\n```\n:::\n:::\n\n\n## The `mutate()` function\n\nIt is also possible to add many new variables in a single operation.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-39_ba3a7cc738ec3756a20a10db10a19273'}\n\n```{.r .cell-code  code-line-numbers=\"3-4|1-6\"}\nmutate(\n  flights,\n  distance_km = distance / 0.62137,\n  distance_knot = distance / 1.15078,\n  .keep = \"used\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 3\n   distance distance_km distance_knot\n      <dbl>       <dbl>         <dbl>\n 1     1400       2253.         1217.\n 2     1416       2279.         1230.\n 3     1089       1753.          946.\n 4     1576       2536.         1370.\n 5      762       1226.          662.\n 6      719       1157.          625.\n 7     1065       1714.          925.\n 8      229        369.          199.\n 9      944       1519.          820.\n10      733       1180.          637.\n# … with 336,766 more rows\n```\n:::\n:::\n\n\n## The `mutate()` function\n\nThe `mutate()` function is very powerful as it allows to use of some **helper functions** to **mutate multiple columns at once**.\n\nFor the following examples, we will use the `weather` table.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-40_e332651f2aac1fc42d1b3a9b06e1d77c'}\n\n```{.r .cell-code}\nweather\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 26,115 × 15\n   origin  year month   day  hour  temp  dewp humid wind_dir wind_speed wind_g…¹\n   <chr>  <int> <int> <int> <int> <dbl> <dbl> <dbl>    <dbl>      <dbl>    <dbl>\n 1 EWR     2013     1     1     1  39.0  26.1  59.4      270      10.4        NA\n 2 EWR     2013     1     1     2  39.0  27.0  61.6      250       8.06       NA\n 3 EWR     2013     1     1     3  39.0  28.0  64.4      240      11.5        NA\n 4 EWR     2013     1     1     4  39.9  28.0  62.2      250      12.7        NA\n 5 EWR     2013     1     1     5  39.0  28.0  64.4      260      12.7        NA\n 6 EWR     2013     1     1     6  37.9  28.0  67.2      240      11.5        NA\n 7 EWR     2013     1     1     7  39.0  28.0  64.4      240      15.0        NA\n 8 EWR     2013     1     1     8  39.9  28.0  62.2      250      10.4        NA\n 9 EWR     2013     1     1     9  39.9  28.0  62.2      260      15.0        NA\n10 EWR     2013     1     1    10  41    28.0  59.6      260      13.8        NA\n# … with 26,105 more rows, 4 more variables: precip <dbl>, pressure <dbl>,\n#   visib <dbl>, time_hour <dttm>, and abbreviated variable name ¹​wind_gust\n```\n:::\n:::\n\n\n## The `mutate()` function\n\nLet's say we want to **round all the numerical columns** of the `weather` data frame. It could be fastidious to do it manually for the 13 numerical columns.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-41_c69c4c2d111edfbb8e66daa4bede59bd'}\n\n```{.r .cell-code}\nglimpse(weather)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 26,115\nColumns: 15\n$ origin     <chr> \"EWR\", \"EWR\", \"EWR\", \"EWR\", \"EWR\", \"EWR\", \"EWR\", \"EWR\", \"EW…\n$ year       <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013,…\n$ month      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ day        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ hour       <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, …\n$ temp       <dbl> 39.02, 39.02, 39.02, 39.92, 39.02, 37.94, 39.02, 39.92, 39.…\n$ dewp       <dbl> 26.06, 26.96, 28.04, 28.04, 28.04, 28.04, 28.04, 28.04, 28.…\n$ humid      <dbl> 59.37, 61.63, 64.43, 62.21, 64.43, 67.21, 64.43, 62.21, 62.…\n$ wind_dir   <dbl> 270, 250, 240, 250, 260, 240, 240, 250, 260, 260, 260, 330,…\n$ wind_speed <dbl> 10.35702, 8.05546, 11.50780, 12.65858, 12.65858, 11.50780, …\n$ wind_gust  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 20.…\n$ precip     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ pressure   <dbl> 1012.0, 1012.3, 1012.5, 1012.2, 1011.9, 1012.4, 1012.2, 101…\n$ visib      <dbl> 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,…\n$ time_hour  <dttm> 2013-01-01 01:00:00, 2013-01-01 02:00:00, 2013-01-01 03:00…\n```\n:::\n:::\n\n\n## The `mutate()` function\n\nWould require a lot of typing (**and I am very lazy!**):\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-42_1995ea2e43009d117d3eda84d68f4d10'}\n\n```{.r .cell-code}\nmutate(\n  weather,\n  year = round(year),\n  month = round(month),\n  day = round(day),\n  hour = round(hour),\n  temp = round(temp),\n  dewp = round(dewp),\n  humid = round(humid),\n  wind_dir = round(wind_dir),\n  wind_speed = round(wind_speed),\n  wind_gust = round(wind_gust),\n  precip = round(precip),\n  pressure = round(pressure)\n)\n```\n:::\n\n\n## The `mutate()` function\n\n- One option, is to use the `across(cols, function_to_apply)` function.\n\n- The following code says: \n\n[apply the `mean()` function to all the columns between `temp` and `pressure`]{.text-outline}\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-43_12bf795f47fb17861efe88c154d8fe51'}\n\n```{.r .cell-code}\nmutate(weather, across(year:pressure, round), .keep = \"used\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 26,115 × 12\n    year month   day  hour  temp  dewp humid wind_dir wind_speed wind_g…¹ precip\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl>      <dbl>    <dbl>  <dbl>\n 1  2013     1     1     1    39    26    59      270         10       NA      0\n 2  2013     1     1     2    39    27    62      250          8       NA      0\n 3  2013     1     1     3    39    28    64      240         12       NA      0\n 4  2013     1     1     4    40    28    62      250         13       NA      0\n 5  2013     1     1     5    39    28    64      260         13       NA      0\n 6  2013     1     1     6    38    28    67      240         12       NA      0\n 7  2013     1     1     7    39    28    64      240         15       NA      0\n 8  2013     1     1     8    40    28    62      250         10       NA      0\n 9  2013     1     1     9    40    28    62      260         15       NA      0\n10  2013     1     1    10    41    28    60      260         14       NA      0\n# … with 26,105 more rows, 1 more variable: pressure <dbl>, and abbreviated\n#   variable name ¹​wind_gust\n```\n:::\n:::\n\n\n## The `mutate()` function\n\n- Another option is to use a combination of `across()` and `where()` functions.\n\n- The following code says: \n\n[apply the `mean()` function to **all the numerical columns**]{.text-outline}\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-44_232f000c7a91ea9fa84dcda5be6f6f7d'}\n\n```{.r .cell-code}\nmutate(weather, across(where(is.numeric), round), .keep = \"used\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 26,115 × 13\n    year month   day  hour  temp  dewp humid wind_dir wind_speed wind_g…¹ precip\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl>      <dbl>    <dbl>  <dbl>\n 1  2013     1     1     1    39    26    59      270         10       NA      0\n 2  2013     1     1     2    39    27    62      250          8       NA      0\n 3  2013     1     1     3    39    28    64      240         12       NA      0\n 4  2013     1     1     4    40    28    62      250         13       NA      0\n 5  2013     1     1     5    39    28    64      260         13       NA      0\n 6  2013     1     1     6    38    28    67      240         12       NA      0\n 7  2013     1     1     7    39    28    64      240         15       NA      0\n 8  2013     1     1     8    40    28    62      250         10       NA      0\n 9  2013     1     1     9    40    28    62      260         15       NA      0\n10  2013     1     1    10    41    28    60      260         14       NA      0\n# … with 26,105 more rows, 2 more variables: pressure <dbl>, visib <dbl>, and\n#   abbreviated variable name ¹​wind_gust\n```\n:::\n:::\n\n## The `summarise()` function\n\n- The `summarise()` function allows summarising columns from a data frame.\n\n- Compress a data frame into single values (i.e. one row).\n  - Hence, you have to provide a function that will be used to calculate a certain value.\n\n## The `summarise()` function\n\nExample 1: Calculate the mean/average values for the `dep_delay` and `arr_delay` columns.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-45_c13f983f81361883fc635130585ab746'}\n\n```{.r .cell-code}\nsummarise(\n  flights,\n  average_departure_delay = mean(dep_delay),\n  average_arrival_delay = mean(arr_delay)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  average_departure_delay average_arrival_delay\n                    <dbl>                 <dbl>\n1                      NA                    NA\n```\n:::\n:::\n\n\n. . .\n\nWhat is going on? Why do we have NA's?\n\n## The `summarise()` function\n\nExample 1: Calculate the mean/average values for the `dep_delay` and `arr_delay` columns.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-46_23db41a103fc12abe1a3f62a269efd53'}\n\n```{.r .cell-code}\nsummarise(\n  flights,\n  average_departure_delay = mean(dep_delay, na.rm = TRUE),\n  average_arrival_delay = mean(arr_delay, na.rm = TRUE)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  average_departure_delay average_arrival_delay\n                    <dbl>                 <dbl>\n1                    12.6                  6.90\n```\n:::\n:::\n\n\n## The `summarise()` function\n\n- It could be interesting to know how many observations were used in the computation.\n- For this, we can use the `n()` helper function.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-47_bc365aa7ad7ffdecb9788a11ef393ff0'}\n\n```{.r .cell-code  code-line-numbers=\"1-6|5\"}\nsummarise(\n  flights,\n  average_departure_delay = mean(dep_delay, na.rm = TRUE),\n  average_arrival_delay = mean(arr_delay, na.rm = TRUE),\n  n = n() # Adding a new column \"n\" with the number of used observations\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  average_departure_delay average_arrival_delay      n\n                    <dbl>                 <dbl>  <int>\n1                    12.6                  6.90 336776\n```\n:::\n:::\n\n\n## The `summarise()` function\n\n- Similarly as with `mutate()`, we can use the `across()` function to avoid extra typing.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-48_0dbdd07912bfd3fab7df46863689cc2a'}\n\n```{.r .cell-code  code-line-numbers=\"1-5|3\"}\nsummarise(\n  weather, \n  across(where(is.numeric), mean, na.rm = TRUE),\n  n = n()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 14\n   year month   day  hour  temp  dewp humid wind_dir wind_speed wind_g…¹  precip\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl>      <dbl>    <dbl>   <dbl>\n1  2013  6.50  15.7  11.5  55.3  41.4  62.5     200.       10.5     25.5 0.00447\n# … with 3 more variables: pressure <dbl>, visib <dbl>, n <int>, and\n#   abbreviated variable name ¹​wind_gust\n```\n:::\n:::\n\n## Working with grouped data\n\n- Alone, the `summarise()` function is not helpful because it collapses a data frame to a single row.\n- Usually, we want to work on **grouped data**.\n- `group_by()` \"prepares\" a data frame to send it to the `summarise()` function.\n\n## Working with grouped data\n\nExample 1: Calculate the average departure delay **by carrier**.\n\nFirst, let's group the data by `carrier`.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-49_ba9ee26a55e21a720320bd44c553998e'}\n\n```{.r .cell-code}\nflights_grouped <- group_by(flights, carrier)\nflights_grouped\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 19\n# Groups:   carrier [16]\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      533        529       4     850     830      20 UA     \n 3  2013     1     1      542        540       2     923     850      33 AA     \n 4  2013     1     1      544        545      -1    1004    1022     -18 B6     \n 5  2013     1     1      554        600      -6     812     837     -25 DL     \n 6  2013     1     1      554        558      -4     740     728      12 UA     \n 7  2013     1     1      555        600      -5     913     854      19 B6     \n 8  2013     1     1      557        600      -3     709     723     -14 EV     \n 9  2013     1     1      557        600      -3     838     846      -8 B6     \n10  2013     1     1      558        600      -2     753     745       8 AA     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n## Working with grouped data\n\nExample 1: Calculate the average departure delay **by carrier**.\n\nSecondly, use `summarise()` as we did before by now using `flights_grouped` instead of `flights`.\n\n\n::: {.cell output-location='slide' hash='index_cache/revealjs/unnamed-chunk-50_5e546752f5a097cb77a3a8aa821fac17'}\n\n```{.r .cell-code  code-line-numbers=\"1-5|2-3\"}\nsummarise(\n  flights_grouped,\n  average_departure_delay = mean(dep_delay, na.rm = TRUE),\n  n = n()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16 × 3\n   carrier average_departure_delay     n\n   <chr>                     <dbl> <int>\n 1 9E                        16.7  18460\n 2 AA                         8.59 32729\n 3 AS                         5.80   714\n 4 B6                        13.0  54635\n 5 DL                         9.26 48110\n 6 EV                        20.0  54173\n 7 F9                        20.2    685\n 8 FL                        18.7   3260\n 9 HA                         4.90   342\n10 MQ                        10.6  26397\n11 OO                        12.6     32\n12 UA                        12.1  58665\n13 US                         3.78 20536\n14 VX                        12.9   5162\n15 WN                        17.7  12275\n16 YV                        19.0    601\n```\n:::\n:::\n\n\n## Working with grouped data\n\n- We can also `summarise()` multiple columns at once.\n\n\n::: {.cell output-location='slide' hash='index_cache/revealjs/unnamed-chunk-51_cfefa91b303eab89bf3ba45de28aee25'}\n\n```{.r .cell-code  code-line-numbers=\"1-5|3\"}\nsummarise(\n  flights_grouped, \n  across(where(is.numeric), mean, na.rm = TRUE),\n  n = n()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16 × 16\n   carrier  year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵\n   <chr>   <dbl> <dbl> <dbl>    <dbl>      <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 9E       2013  6.56  15.6    1487.      1472.   16.7    1639.   1671.   7.38 \n 2 AA       2013  6.48  15.7    1297.      1290.    8.59   1521.   1545.   0.364\n 3 AS       2013  6.41  15.8    1295.      1285.    5.80   1565.   1595.  -9.93 \n 4 B6       2013  6.52  15.8    1381.      1397.   13.0    1406.   1469.   9.46 \n 5 DL       2013  6.57  15.8    1351.      1346.    9.26   1573.   1596.   1.64 \n 6 EV       2013  6.58  15.7    1369.      1354.   20.0    1488.   1532.  15.8  \n 7 F9       2013  6.59  15.6    1438.      1408.   20.2    1672.   1646.  21.9  \n 8 FL       2013  6.02  15.7    1387.      1372.   18.7    1574.   1585.  20.1  \n 9 HA       2013  6.27  15.7     949.       974.    4.90   1474.   1492.  -6.92 \n10 MQ       2013  6.47  15.7    1393.      1387.   10.6    1551.   1564.  10.8  \n11 OO       2013  8.75  16.3    1725.      1731.   12.6    1913.   1890.  11.9  \n12 UA       2013  6.56  15.7    1327.      1313.   12.1    1509.   1544.   3.56 \n13 US       2013  6.55  15.7    1231.      1246.    3.78   1402.   1412.   2.13 \n14 VX       2013  6.93  15.7    1280.      1265.   12.9    1523.   1596.   1.76 \n15 WN       2013  6.63  15.7    1281.      1260.   17.7    1443.   1450.   9.65 \n16 YV       2013  6.91  15.8    1601.      1575.   19.0    1761.   1743.  15.6  \n# … with 6 more variables: flight <dbl>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, n <int>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-52_2a654e395cd88b1a108efcc27b0b6df2'}\n\n:::\n\n\n## Working with grouped data\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\"}\n## New in `dplyr` 1.1.0\n\n`.by/by` is an experimental alternative to `group_by()` that supports per-operation grouping for `mutate()`, `summarise()`, `filter()`, and the `slice()` family.\n:::\n\n[We want to calculate the average `height` for each combination of `species` and `homeworld` in the `starwars` data frame.]{.small}\n\n:::: {.columns .small}\n\n::: {.column width='55%'}\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-53_2a9c593f7f606fc30e2ae860566f3cbb'}\n\n```{.r .cell-code}\nstarwars_grouped <- group_by(starwars, species, homeworld)\nsummarise(\n  starwars_grouped, \n  mean_height = mean(height)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 58 × 3\n# Groups:   species [38]\n   species  homeworld   mean_height\n   <chr>    <chr>             <dbl>\n 1 Aleena   Aleen Minor          79\n 2 Besalisk Ojom                198\n 3 Cerean   Cerea               198\n 4 Chagrian Champala            196\n 5 Clawdite Zolan               168\n 6 Droid    Naboo                96\n 7 Droid    Tatooine            132\n 8 Droid    <NA>                 NA\n 9 Dug      Malastare           112\n10 Ewok     Endor                88\n# … with 48 more rows\n```\n:::\n:::\n\n:::\n\n::: {.column width='45%'}\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-54_b338b7e74a757473ca2aaeb1714f8d20'}\n\n```{.r .cell-code}\nsummarise(\n  starwars, \n  mean_height = mean(height), \n  .by = c(species, homeworld)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 58 × 3\n   species homeworld mean_height\n   <chr>   <chr>           <dbl>\n 1 Human   Tatooine         179.\n 2 Droid   Tatooine         132 \n 3 Droid   Naboo             96 \n 4 Human   Alderaan         176.\n 5 Human   Stewjon          182 \n 6 Human   Eriadu           180 \n 7 Wookiee Kashyyyk         231 \n 8 Human   Corellia         175 \n 9 Rodian  Rodia            173 \n10 Hutt    Nal Hutta        175 \n# … with 48 more rows\n```\n:::\n:::\n\n\n:::\n\n::::\n\n# Exercises {background-color=\"#2C404A\"}\n\n## The Titanic\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-55_b55d4a94ea03f49cb708c8c1f6755812'}\n\n```{.r .cell-code}\ntitanic <- read_csv(\"https://bit.ly/3xrnh3U\")\nglimpse(titanic)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,309\nColumns: 9\n$ pclass      <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ sex         <chr> \"female\", \"male\", \"female\", \"male\", \"female\", \"male\", \"fem…\n$ age         <dbl> 29.00, 0.92, 2.00, 30.00, 25.00, 48.00, 63.00, 39.00, 53.0…\n$ family_size <dbl> 0, 3, 3, 3, 3, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0…\n$ ticket      <chr> \"24160\", \"113781\", \"113781\", \"113781\", \"113781\", \"19952\", …\n$ fare        <dbl> 211.3375, 151.5500, 151.5500, 151.5500, 151.5500, 26.5500,…\n$ cabin       <chr> \"B5\", \"C22 C26\", \"C22 C26\", \"C22 C26\", \"C22 C26\", \"E12\", \"…\n$ embarked    <chr> \"S\", \"S\", \"S\", \"S\", \"S\", \"S\", \"S\", \"S\", \"S\", \"C\", \"C\", \"C\"…\n$ survived    <dbl> 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0…\n```\n:::\n:::\n\n\n## The Titanic\n\nUsing your newly acquired skills, try answering the following questions:\n\n1. What was the average age of passengers on the Titanic?\n2. How many passengers on the Titanic were from first class?\n3. What was the proportion of passengers who survived the Titanic disaster?\n4. What was the average ticket price by cabin class?\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-56_b9c4c797b94c7e87b2f7af1bf3e53505'}\n\n:::\n\n\n# Piping operations {background-color=\"#2C404A\"}\n\n![Photo by <a href=\"https://unsplash.com/@tival?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Val Tievsky</a> on <a href=\"https://unsplash.com/photos/fzmyw3mgVA0?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>](images/unsplash_pipe.jpg){fig-align=\"center\"}\n\n## Piping operations\n\nWe have seen that to summarise grouped data, we need to perform two operations:\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-57_33dab47cae554a85c43642809543e8bc'}\n\n```{.r .cell-code  code-line-numbers=\"1-7|1|3-7\"}\nflights_grouped <- group_by(flights, carrier)\n\nres <- summarise(\n  flights_grouped,\n  average_departure_delay = mean(dep_delay, na.rm = TRUE),\n  n = n()\n)\n```\n:::\n\n\nThe thing is that we never directly use `flights_grouped`; it is only used as an **intermediate** object.\n\n## Piping operations\n\n- With R 4.1.0+, we can use the pipe operator ([**|>**]{style=\"font-family:ubuntu;\"}) to chain operations.\n\n- Basically, ([**|>**]{style=\"font-family:ubuntu;\"}) takes the left-hand side (**lhs**) object and passes it as the first argument in the right-hand side (**rhs**) function.\n\n:::: {.columns .fragment}\n\n::: {.column width=\"28%\"}\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-58_0cac39cbf669fcffa18fa4875110e549'}\n\n```{.r .cell-code}\n# Same as log(10)\n10 |> log()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.302585\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"38%\"}\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-59_707d2e6d290617fcf70caa8bc29dbabe'}\n\n```{.r .cell-code}\n# Same has:\n# toupper(\"my string\")\n\"my string\" |> toupper()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"MY STRING\"\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"34%\"}\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-60_0453eb39acd4e0e85621d219d28b1ada'}\n\n```{.r .cell-code}\n# Same has:\n# head(chickwts), 6)\nchickwts |> head(6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  weight      feed\n1    179 horsebean\n2    160 horsebean\n3    136 horsebean\n4    227 horsebean\n5    217 horsebean\n6    168 horsebean\n```\n:::\n:::\n\n\n:::\n\n::::\n\n## Piping operations\n\n- Why is this useful? Because we can chain intermediate steps in data analysis.\n\n- For example:\n  1. Take `flights` and pass it as the first argument in `group_by()`.\n  2. Group the data based on the `carrier` column.\n  3. Summarise the data to calculate the average departure delay.\n\n\n::: {.cell output-location='slide' hash='index_cache/revealjs/unnamed-chunk-61_ee7f1b4fd4e4af356f0d801e0d8c0c5b'}\n\n```{.r .cell-code  code-line-numbers=\"|1|2|3-6|1-7\"}\nflights |> # Take the flight data frame\n  group_by(carrier) |> # Then group it by carrier\n  summarise( # Then calculate the average departure delay (by group)\n    average_departure_delay = mean(dep_delay, na.rm = TRUE),\n    n = n()\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16 × 3\n   carrier average_departure_delay     n\n   <chr>                     <dbl> <int>\n 1 9E                        16.7  18460\n 2 AA                         8.59 32729\n 3 AS                         5.80   714\n 4 B6                        13.0  54635\n 5 DL                         9.26 48110\n 6 EV                        20.0  54173\n 7 F9                        20.2    685\n 8 FL                        18.7   3260\n 9 HA                         4.90   342\n10 MQ                        10.6  26397\n11 OO                        12.6     32\n12 UA                        12.1  58665\n13 US                         3.78 20536\n14 VX                        12.9   5162\n15 WN                        17.7  12275\n16 YV                        19.0    601\n```\n:::\n:::\n\n\n## Piping operations\n\n- By default, the pipe operator passes the **lhs** object as the first parameter in the **rhs** function. We can control this behaviour using the \"**\\_**\" placeholder.\n\n- For example, `rnorm(n, mean = 0, sd = 1)` has three arguments.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-62_25f7044034e124a58e73f0092368585d'}\n\n```{.r .cell-code}\n10  |> rnorm() # Same as rnorm(n = 10, mean = 0, sd = 1)\n10  |> rnorm(5, mean = _) # Same as rnorm(5, mean = 10, sd = 1)\n```\n:::\n\n\n. . .\n\n::: {.callout-caution}\n## Attention!!!\n\nYou have to use the placeholder with named parameters.\n\n:::\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-63_5a70e41f2b78793f55f2758b603206df'}\n\n```{.r .cell-code}\n10  |> rnorm(5, _) # Not good!\n10  |> rnorm(5, mean = _) # Good!\n```\n:::\n\n\n# Joining tables {background-color=\"#2C404A\"}\n\n## Joining tables\n\n- Data are rarely stored in a single data frame or a single file.\n\n- Good database practices recommend having similar data in separate tables.\n\n- Joins are used to **merge data frame** together.\n\n## Understanding joins\n\n<figure>\n  <center>\n  <img src=\"images/join_types.svg\" alt=\"Trulli\" style=\"width:65%\">\n  <figcaption>Types of equality and filtering joins</figcaption>\n  </center>\n</figure> \n\n## Understanding joins\n\nSuppose that we have two data frames: `sites` and `measurements`.\n\n. . .\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-64_74d618d281be5ba179078f653dfebe1d'}\n::: {.cell-output-display}\n```{=html}\n<div id=\"fcfubaxkdj\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#fcfubaxkdj .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: rgba(255, 255, 255, 0);\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#fcfubaxkdj .gt_heading {\n  background-color: rgba(255, 255, 255, 0);\n  text-align: center;\n  border-bottom-color: rgba(255, 255, 255, 0);\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#fcfubaxkdj .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#fcfubaxkdj .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: rgba(255, 255, 255, 0);\n  border-bottom-width: 0;\n}\n\n#fcfubaxkdj .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: rgba(255, 255, 255, 0);\n  border-top-width: 0;\n}\n\n#fcfubaxkdj .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#fcfubaxkdj .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#fcfubaxkdj .gt_col_heading {\n  color: #333333;\n  background-color: rgba(255, 255, 255, 0);\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#fcfubaxkdj .gt_column_spanner_outer {\n  color: #333333;\n  background-color: rgba(255, 255, 255, 0);\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#fcfubaxkdj .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#fcfubaxkdj .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#fcfubaxkdj .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#fcfubaxkdj .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: rgba(255, 255, 255, 0);\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#fcfubaxkdj .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: rgba(255, 255, 255, 0);\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#fcfubaxkdj .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#fcfubaxkdj .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#fcfubaxkdj .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#fcfubaxkdj .gt_stub {\n  color: #333333;\n  background-color: rgba(255, 255, 255, 0);\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#fcfubaxkdj .gt_stub_row_group {\n  color: #333333;\n  background-color: rgba(255, 255, 255, 0);\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#fcfubaxkdj .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#fcfubaxkdj .gt_summary_row {\n  color: #333333;\n  background-color: rgba(255, 255, 255, 0);\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#fcfubaxkdj .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#fcfubaxkdj .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#fcfubaxkdj .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#fcfubaxkdj .gt_grand_summary_row {\n  color: #333333;\n  background-color: rgba(255, 255, 255, 0);\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#fcfubaxkdj .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#fcfubaxkdj .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#fcfubaxkdj .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#fcfubaxkdj .gt_footnotes {\n  color: #333333;\n  background-color: rgba(255, 255, 255, 0);\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#fcfubaxkdj .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#fcfubaxkdj .gt_sourcenotes {\n  color: #333333;\n  background-color: rgba(255, 255, 255, 0);\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#fcfubaxkdj .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#fcfubaxkdj .gt_left {\n  text-align: left;\n}\n\n#fcfubaxkdj .gt_center {\n  text-align: center;\n}\n\n#fcfubaxkdj .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#fcfubaxkdj .gt_font_normal {\n  font-weight: normal;\n}\n\n#fcfubaxkdj .gt_font_bold {\n  font-weight: bold;\n}\n\n#fcfubaxkdj .gt_font_italic {\n  font-style: italic;\n}\n\n#fcfubaxkdj .gt_super {\n  font-size: 65%;\n}\n\n#fcfubaxkdj .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#fcfubaxkdj .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#fcfubaxkdj .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#fcfubaxkdj .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#fcfubaxkdj .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#fcfubaxkdj .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#fcfubaxkdj .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  <thead class=\"gt_header\">\n    <tr>\n      <td colspan=\"3\" class=\"gt_heading gt_title gt_font_normal gt_bottom_border\" style>The <strong>sites</strong> table contains information where about sampling locations</td>\n    </tr>\n    \n  </thead>\n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"site_id\">site_id</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"latitude\">latitude</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"longitude\">longitude</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"site_id\" class=\"gt_row gt_left\">Site A</td>\n<td headers=\"latitude\" class=\"gt_row gt_right\">45.5231</td>\n<td headers=\"longitude\" class=\"gt_row gt_right\">-122.6765</td></tr>\n    <tr><td headers=\"site_id\" class=\"gt_row gt_left\">Site B</td>\n<td headers=\"latitude\" class=\"gt_row gt_right\">46.1234</td>\n<td headers=\"longitude\" class=\"gt_row gt_right\">-123.4567</td></tr>\n    <tr><td headers=\"site_id\" class=\"gt_row gt_left\">Site C</td>\n<td headers=\"latitude\" class=\"gt_row gt_right\">47.3456</td>\n<td headers=\"longitude\" class=\"gt_row gt_right\">-124.5678</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-65_aa6654300dcccd610e179efe1ce02c24'}\n::: {.cell-output-display}\n```{=html}\n<div id=\"gqsnvzqyuz\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#gqsnvzqyuz .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: rgba(255, 255, 255, 0);\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#gqsnvzqyuz .gt_heading {\n  background-color: rgba(255, 255, 255, 0);\n  text-align: center;\n  border-bottom-color: rgba(255, 255, 255, 0);\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#gqsnvzqyuz .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#gqsnvzqyuz .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: rgba(255, 255, 255, 0);\n  border-bottom-width: 0;\n}\n\n#gqsnvzqyuz .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: rgba(255, 255, 255, 0);\n  border-top-width: 0;\n}\n\n#gqsnvzqyuz .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#gqsnvzqyuz .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#gqsnvzqyuz .gt_col_heading {\n  color: #333333;\n  background-color: rgba(255, 255, 255, 0);\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#gqsnvzqyuz .gt_column_spanner_outer {\n  color: #333333;\n  background-color: rgba(255, 255, 255, 0);\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#gqsnvzqyuz .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#gqsnvzqyuz .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#gqsnvzqyuz .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#gqsnvzqyuz .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: rgba(255, 255, 255, 0);\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#gqsnvzqyuz .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: rgba(255, 255, 255, 0);\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#gqsnvzqyuz .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#gqsnvzqyuz .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#gqsnvzqyuz .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#gqsnvzqyuz .gt_stub {\n  color: #333333;\n  background-color: rgba(255, 255, 255, 0);\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gqsnvzqyuz .gt_stub_row_group {\n  color: #333333;\n  background-color: rgba(255, 255, 255, 0);\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#gqsnvzqyuz .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#gqsnvzqyuz .gt_summary_row {\n  color: #333333;\n  background-color: rgba(255, 255, 255, 0);\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gqsnvzqyuz .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#gqsnvzqyuz .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#gqsnvzqyuz .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#gqsnvzqyuz .gt_grand_summary_row {\n  color: #333333;\n  background-color: rgba(255, 255, 255, 0);\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gqsnvzqyuz .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#gqsnvzqyuz .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#gqsnvzqyuz .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#gqsnvzqyuz .gt_footnotes {\n  color: #333333;\n  background-color: rgba(255, 255, 255, 0);\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#gqsnvzqyuz .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gqsnvzqyuz .gt_sourcenotes {\n  color: #333333;\n  background-color: rgba(255, 255, 255, 0);\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#gqsnvzqyuz .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gqsnvzqyuz .gt_left {\n  text-align: left;\n}\n\n#gqsnvzqyuz .gt_center {\n  text-align: center;\n}\n\n#gqsnvzqyuz .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#gqsnvzqyuz .gt_font_normal {\n  font-weight: normal;\n}\n\n#gqsnvzqyuz .gt_font_bold {\n  font-weight: bold;\n}\n\n#gqsnvzqyuz .gt_font_italic {\n  font-style: italic;\n}\n\n#gqsnvzqyuz .gt_super {\n  font-size: 65%;\n}\n\n#gqsnvzqyuz .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#gqsnvzqyuz .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#gqsnvzqyuz .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#gqsnvzqyuz .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#gqsnvzqyuz .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#gqsnvzqyuz .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#gqsnvzqyuz .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  <thead class=\"gt_header\">\n    <tr>\n      <td colspan=\"3\" class=\"gt_heading gt_title gt_font_normal gt_bottom_border\" style>The <strong>measurements</strong> table contains temperature measurements</td>\n    </tr>\n    \n  </thead>\n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"site_name\">site_name</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"temperature\">temperature</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"date\">date</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"site_name\" class=\"gt_row gt_left\">Site A</td>\n<td headers=\"temperature\" class=\"gt_row gt_right\">20.5</td>\n<td headers=\"date\" class=\"gt_row gt_right\">2020-01-01</td></tr>\n    <tr><td headers=\"site_name\" class=\"gt_row gt_left\">Site A</td>\n<td headers=\"temperature\" class=\"gt_row gt_right\">21.3</td>\n<td headers=\"date\" class=\"gt_row gt_right\">2020-01-02</td></tr>\n    <tr><td headers=\"site_name\" class=\"gt_row gt_left\">Site B</td>\n<td headers=\"temperature\" class=\"gt_row gt_right\">18.9</td>\n<td headers=\"date\" class=\"gt_row gt_right\">2020-02-01</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n::: {.cell hash='index_cache/revealjs/export-join-tables_1e75894fd29d88e99885c3460b8cf9ea'}\n\n:::\n\n\n## Understanding joins\n\nIf you want to follow along, you can read the toy data as this:\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-67_d869a556d6a9f2bac99e6ba3eec73a5b'}\n\n```{.r .cell-code}\nsites <- read_csv(\"https://bit.ly/3xAwqr1\")\nmeasurements <- read_csv(\"https://bit.ly/3Sepl9a\")\n```\n:::\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-68_c348249e9dc099cfb3aa068b845f662e'}\n\n```{.r .cell-code}\nsites\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  site_id latitude longitude\n  <chr>      <dbl>     <dbl>\n1 Site A      45.5     -123.\n2 Site B      46.1     -123.\n3 Site C      47.3     -125.\n```\n:::\n\n```{.r .cell-code}\nmeasurements\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  site_name temperature date      \n  <chr>           <dbl> <date>    \n1 Site A           20.5 2020-01-01\n2 Site A           21.3 2020-01-02\n3 Site B           18.9 2020-02-01\n```\n:::\n:::\n\n\n\n## Left joins\n\n::: {.small}\n\n\n::: {.cell layout-ncol=\"2\" hash='index_cache/revealjs/unnamed-chunk-69_cc285147a454e00ca426cb62d03bcb48'}\n\n```{.r .cell-code}\nsites\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  site_id latitude longitude\n  <chr>      <dbl>     <dbl>\n1 Site A      45.5     -123.\n2 Site B      46.1     -123.\n3 Site C      47.3     -125.\n```\n:::\n\n```{.r .cell-code}\nmeasurements\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  site_name temperature date      \n  <chr>           <dbl> <date>    \n1 Site A           20.5 2020-01-01\n2 Site A           21.3 2020-01-02\n3 Site B           18.9 2020-02-01\n```\n:::\n:::\n\n\n:::\n\nIf we try to join `sites` and `measurements` together, we get the following error.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-70_7dd5717fb85470f635b81e4b3c9ac966'}\n\n```{.r .cell-code}\nleft_join(sites, measurements)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `left_join()`:\n! `by` must be supplied when `x` and `y` have no common variables.\nℹ Use `cross_join()` to perform a cross-join.\n```\n:::\n:::\n\n\n. . .\n\n:::{.callout-tip collapse=false appearance='default' icon=true}\n\n## Good practice\n\nThe `*_join()` family functions will try to automatically join tables using columns with the same names. However, it is of good practice to be explicit on which columns to use with the `by` argument.\n\n:::\n\n## Left joins\n\n- We can specify the columns to use for the join with the `by` argument.\n\n- The following code says: \n\n[Use the `site_id` column in `sites`]{.text-outline} [and the `site_name` column in `measurements`]{.text-outline} to join both tables together.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-71_bafd33f424637e0d3eb805e7ecab3d68'}\n\n```{.r .cell-code}\nleft_join(sites, measurements, by = c(\"site_id\" = \"site_name\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 5\n  site_id latitude longitude temperature date      \n  <chr>      <dbl>     <dbl>       <dbl> <date>    \n1 Site A      45.5     -123.        20.5 2020-01-01\n2 Site A      45.5     -123.        21.3 2020-01-02\n3 Site B      46.1     -123.        18.9 2020-02-01\n4 Site C      47.3     -125.        NA   NA        \n```\n:::\n:::\n\n\n## Inner joins\n\n::: {.small}\n\n\n::: {.cell layout-ncol=\"2\" hash='index_cache/revealjs/unnamed-chunk-72_719e0ef843a2017360327da516788865'}\n\n```{.r .cell-code}\nsites\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  site_id latitude longitude\n  <chr>      <dbl>     <dbl>\n1 Site A      45.5     -123.\n2 Site B      46.1     -123.\n3 Site C      47.3     -125.\n```\n:::\n\n```{.r .cell-code}\nmeasurements\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  site_name temperature date      \n  <chr>           <dbl> <date>    \n1 Site A           20.5 2020-01-01\n2 Site A           21.3 2020-01-02\n3 Site B           18.9 2020-02-01\n```\n:::\n:::\n\n\n:::\n\nAn `inner_join()` [keeps only the observations that match between the tables.]{.text-outline}\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-73_2667fea94e2acececb6b64fdb3500701'}\n\n```{.r .cell-code}\ninner_join(sites, measurements, by = c(\"site_id\" = \"site_name\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  site_id latitude longitude temperature date      \n  <chr>      <dbl>     <dbl>       <dbl> <date>    \n1 Site A      45.5     -123.        20.5 2020-01-01\n2 Site A      45.5     -123.        21.3 2020-01-02\n3 Site B      46.1     -123.        18.9 2020-02-01\n```\n:::\n:::\n\n\n## Full joins\n\n::: {.small}\n\n\n::: {.cell layout-ncol=\"2\" hash='index_cache/revealjs/unnamed-chunk-74_cb4e808f840c6f281aef898a284533df'}\n\n```{.r .cell-code}\nsites\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  site_id latitude longitude\n  <chr>      <dbl>     <dbl>\n1 Site A      45.5     -123.\n2 Site B      46.1     -123.\n3 Site C      47.3     -125.\n```\n:::\n\n```{.r .cell-code}\nmeasurements\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  site_name temperature date      \n  <chr>           <dbl> <date>    \n1 Site A           20.5 2020-01-01\n2 Site A           21.3 2020-01-02\n3 Site B           18.9 2020-02-01\n```\n:::\n:::\n\n\n:::\n\nA `full_join()` [keeps all the observations contained in the tables.]{.text-outline} `NA` will be used as a fill value when there are no matches.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-75_1ea11ab22ed4b89c8b21dea15aadf227'}\n\n```{.r .cell-code}\nfull_join(sites, measurements, by = c(\"site_id\" = \"site_name\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 5\n  site_id latitude longitude temperature date      \n  <chr>      <dbl>     <dbl>       <dbl> <date>    \n1 Site A      45.5     -123.        20.5 2020-01-01\n2 Site A      45.5     -123.        21.3 2020-01-02\n3 Site B      46.1     -123.        18.9 2020-02-01\n4 Site C      47.3     -125.        NA   NA        \n```\n:::\n:::\n\n\n## Anti joins\n\n::: {.small}\n\n\n::: {.cell layout-ncol=\"2\" hash='index_cache/revealjs/unnamed-chunk-76_17347aa522ed3899f293f1508189faa8'}\n\n```{.r .cell-code}\nsites\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  site_id latitude longitude\n  <chr>      <dbl>     <dbl>\n1 Site A      45.5     -123.\n2 Site B      46.1     -123.\n3 Site C      47.3     -125.\n```\n:::\n\n```{.r .cell-code}\nmeasurements\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  site_name temperature date      \n  <chr>           <dbl> <date>    \n1 Site A           20.5 2020-01-01\n2 Site A           21.3 2020-01-02\n3 Site B           18.9 2020-02-01\n```\n:::\n:::\n\n\n:::\n\nAn `anti-join()` find all observations that have no match between tables. The next bloc of code says:\n\n[find all observations in `sites` that have no match in `measurements`]{.text-outline}\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-77_aa7fe7533719113f432c04952fea06df'}\n\n```{.r .cell-code}\nanti_join(sites, measurements, by = c(\"site_id\" = \"site_name\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  site_id latitude longitude\n  <chr>      <dbl>     <dbl>\n1 Site C      47.3     -125.\n```\n:::\n:::\n\n\n## Anti joins\n\n::: {.small}\n\n\n::: {.cell layout-ncol=\"2\" hash='index_cache/revealjs/unnamed-chunk-78_2ff2b88bd800d2d7d9fca9f5e756b3bd'}\n\n```{.r .cell-code}\nsites\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  site_id latitude longitude\n  <chr>      <dbl>     <dbl>\n1 Site A      45.5     -123.\n2 Site B      46.1     -123.\n3 Site C      47.3     -125.\n```\n:::\n\n```{.r .cell-code}\nmeasurements\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  site_name temperature date      \n  <chr>           <dbl> <date>    \n1 Site A           20.5 2020-01-01\n2 Site A           21.3 2020-01-02\n3 Site B           18.9 2020-02-01\n```\n:::\n:::\n\n\n:::\n\nIf we inverse the order of the data frames, we get a different result. The next bloc of code says:\n\n[find all observations in `measurements` that have no match in `sites`]{.text-outline}\n\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-79_ce5f35e7cb4bcf6d9b8417f072af01de'}\n\n```{.r .cell-code}\nanti_join(measurements, sites, by = c(\"site_name\" = \"site_id\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 3\n# … with 3 variables: site_name <chr>, temperature <dbl>, date <date>\n```\n:::\n:::\n\n\n## Inequality and rolling joins\n\nSo far, we have joined tables on the exact match: **both tables need to have columns sharing the same value**.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-80_91102ea8236f7fb0d05aa4efec68dd92'}\n\n:::\n\n\nNow, consider these two data frames to merge using the `depth_m` column.\n\n:::: {.columns}\n\n::: {.column width='50%'}\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-81_c23237ba972ceecc7f995d077e6c2712'}\n\n```{.r .cell-code}\ndf_temperature\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  depth_m  chla\n    <dbl> <dbl>\n1     1.1   0.1\n2     1.4   0.3\n```\n:::\n:::\n\n\n:::\n\n::: {.column width='50%'}\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-82_a76528498e2fbedf19758c0a3b58bdc7'}\n\n```{.r .cell-code}\ndf_o2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  depth_m  doxy\n    <dbl> <dbl>\n1    1.12   200\n2    1.2    250\n```\n:::\n:::\n\n\n:::\n\n::::\n\n. . .\n\nWhat will happen if I try to join them?\n\n## Inequality joins\n\nJoining these table **is not working** because there are no values of `depth_m` that match between `df_temperature` and `df_o2`\n\n::: {.small}\n\n\n::: {.cell layout-ncol=\"2\" hash='index_cache/revealjs/unnamed-chunk-83_520883ba930fdbaf7e02f1fd53cb47a9'}\n\n```{.r .cell-code}\ndf_temperature\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  depth_m  chla\n    <dbl> <dbl>\n1     1.1   0.1\n2     1.4   0.3\n```\n:::\n\n```{.r .cell-code}\ndf_o2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  depth_m  doxy\n    <dbl> <dbl>\n1    1.12   200\n2    1.2    250\n```\n:::\n:::\n\n:::\n\n:::: {.columns .small}\n\n::: {.column width='50%'}\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-84_4f3bd460427733604ad1b8838b47cbf0'}\n\n```{.r .cell-code}\nleft_join(df_temperature, df_o2, by = \"depth_m\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  depth_m  chla  doxy\n    <dbl> <dbl> <dbl>\n1     1.1   0.1    NA\n2     1.4   0.3    NA\n```\n:::\n:::\n\n\n:::\n\n::: {.column width='50%'}\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-85_32407e1a148059958718073626019456'}\n\n```{.r .cell-code}\ninner_join(df_temperature, df_o2, by = \"depth_m\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 3\n# … with 3 variables: depth_m <dbl>, chla <dbl>, doxy <dbl>\n```\n:::\n:::\n\n\n:::\n\n::::\n\n## Inequality joins\n\nBecause there are no exact matches in the `depth_m` column, we can use an inequality join with the `join_by()` function.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-86_8cb997564efa711367558111fc75f77e'}\n\n```{.r .cell-code}\nleft_join(df_temperature, df_o2, by = join_by(depth_m <= depth_m))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 4\n  depth_m.x  chla depth_m.y  doxy\n      <dbl> <dbl>     <dbl> <dbl>\n1       1.1   0.1      1.12   200\n2       1.1   0.1      1.2    250\n3       1.4   0.3     NA       NA\n```\n:::\n:::\n\n\nThe previous bloc of code says:\n\n[left join `df_temperature` and `df_o2`]{.fragment .text-outline} [where `depth_m` in `df_temperature` is smaller or equal to `depth_m` in `df_o2`]{.fragment .text-outline}\n\n## Inequality joins\n\n::: {.small}\n\n\n::: {.cell layout-ncol=\"2\" hash='index_cache/revealjs/unnamed-chunk-87_6dd2d9822228fc5c76c83625acf8fce3'}\n\n```{.r .cell-code}\ndf_temperature\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  depth_m  chla\n    <dbl> <dbl>\n1     1.1   0.1\n2     1.4   0.3\n```\n:::\n\n```{.r .cell-code}\ndf_o2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  depth_m  doxy\n    <dbl> <dbl>\n1    1.12   200\n2    1.2    250\n```\n:::\n:::\n\n:::\n\nNote that there are two rows in `df_o2` that match the specified condition. This is why we end up with three rows after joining.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-88_f589dc3ff9b39e8a63f019638db14ad7'}\n\n```{.r .cell-code}\nleft_join(df_temperature, df_o2, by = join_by(depth_m <= depth_m))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 4\n  depth_m.x  chla depth_m.y  doxy\n      <dbl> <dbl>     <dbl> <dbl>\n1       1.1   0.1      1.12   200\n2       1.1   0.1      1.2    250\n3       1.4   0.3     NA       NA\n```\n:::\n:::\n\n\n## Rolling joins\n\nInstead of using an inequality join, we can try a rolling join. This type of join limits the results returned from an inequality join condition and uses the `closest()` function.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-89_d9909f6aa846096b175e22c11d686a91'}\n\n```{.r .cell-code}\nleft_join(df_temperature, df_o2, by = join_by(closest(depth_m <= depth_m)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  depth_m.x  chla depth_m.y  doxy\n      <dbl> <dbl>     <dbl> <dbl>\n1       1.1   0.1      1.12   200\n2       1.4   0.3     NA       NA\n```\n:::\n:::\n\n\nThe previous bloc of code says:\n\n[left join `df_temperature` and `df_o2`]{.fragment .text-outline} [where `depth_m` in `df_temperature` is smaller or equal to `depth_m` in `df_o2`]{.fragment .text-outline} [**but** only keep the closest match]{.fragment .text-outline}\n\n## Exercise\n\nYour turn: question\n\n <figure>\n  <center>\n  <img src=\"https://bookdown.org/asmundhreinn/r4ds-master/diagrams/relational-nycflights.png\" alt=\"Trulli\" style=\"width:50%\">\n  <figcaption>Source: [R for Data Science](https://bookdown.org/asmundhreinn/r4ds-master/)</figcaption>\n  </center>\n</figure>\n\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-90_8897ccfb42cf20da7a612130e1189a75'}\n\n```{.r .cell-code}\nweather |>\n  summarise(mean_temp = mean(temp, na.rm = TRUE), .by = month) |>\n  filter(mean_temp == max(mean_temp)) |>\n  left_join(flights) |>\n  summarise(month = unique(month), n = n(), .by = carrier) |>\n  left_join(airlines) |>\n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 4\n   carrier month     n name                       \n   <chr>   <int> <int> <chr>                      \n 1 UA          7  5066 United Air Lines Inc.      \n 2 B6          7  4984 JetBlue Airways            \n 3 EV          7  4641 ExpressJet Airlines Inc.   \n 4 DL          7  4251 Delta Air Lines Inc.       \n 5 AA          7  2882 American Airlines Inc.     \n 6 MQ          7  2261 Envoy Air                  \n 7 US          7  1786 US Airways Inc.            \n 8 9E          7  1494 Endeavor Air Inc.          \n 9 WN          7  1076 Southwest Airlines Co.     \n10 VX          7   489 Virgin America             \n11 FL          7   263 AirTran Airways Corporation\n12 YV          7    81 Mesa Airlines Inc.         \n13 AS          7    62 Alaska Airlines Inc.       \n14 F9          7    58 Frontier Airlines Inc.     \n15 HA          7    31 Hawaiian Airlines Inc.     \n```\n:::\n\n```{.r .cell-code}\nflights |>\n  count(month, day, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 365 × 3\n   month   day     n\n   <int> <int> <int>\n 1    11    27  1014\n 2     7    11  1006\n 3     7     8  1004\n 4     7    10  1004\n 5    12     2  1004\n 6     7    18  1003\n 7     7    25  1003\n 8     7    12  1002\n 9     7     9  1001\n10     7    17  1001\n# … with 355 more rows\n```\n:::\n:::\n\n\n# Time to practice {background-color=\"#2C404A\"}\n\n1 - Work on your data\n\n2 - SQL Murder Mystery: [https://mystery.knightlab.com/](https://mystery.knightlab.com/)\n\n# SQL Murder Mystery {background-color=\"#2C404A\"}\n\n![Photo by <a href=\"https://unsplash.com/@mattpopovich?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Matt Popovich</a> on <a href=\"https://unsplash.com/photos/7mqsZsE6FaU?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>](images/unsplash_police_car.jpg){fig-align=\"center\"}\n\n## SQL Murder Mystery\n\n:::: {.columns}\n\n::: {.column width='40%'}\n> There's been a Murder in SQL City! The SQL Murder Mystery is designed to be both a self-directed lesson to learn SQL concepts and commands and a fun game for experienced SQL users to solve an intriguing crime [https://mystery.knightlab.com/](https://mystery.knightlab.com/).\n:::\n\n::: {.column width='60%'}\n![Photo by <a href=\"https://unsplash.com/@davidvondiemar?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">David von Diemar</a> on <a href=\"https://unsplash.com/photos/jM6Y2nhsAtk?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n  ](images/unsplash_do_not_cross.jpg){width=6in}\n:::\n\n::::\n\n## SQL Murder Mystery\n\n- A crime has taken place and the detective needs your help. \n\n- The detective gave you the **crime scene report**, but you somehow lost it. \n\n- You vaguely remember that the crime was **a ​murder​** that occurred sometime on **​Jan.15, 2018​** and that it took place in **​SQL City​**. \n\n- Start by retrieving the corresponding **crime scene report** from the police department’s database.\n\n## SQL Murder Mystery\n\n- There are several files (tables) with all the information you need to find the murderer.\n\n\n::: {.cell hash='index_cache/revealjs/unnamed-chunk-91_65b73902f95ca5aca4cecbe1445789ec'}\n::: {.cell-output .cell-output-stdout}\n```\ndata/sql_murder_mystery/\n├── crime_scene_report.csv\n├── drivers_license.csv\n├── facebook_event_checkin.csv\n├── get_fit_now_check_in.csv\n├── get_fit_now_member.csv\n├── income.csv\n├── interview.csv\n├── person.csv\n└── solution.csv\n```\n:::\n:::\n\n\n## SQL Murder Mystery\n\nEntity-relationship (ER) diagram of the SQL murder tables\n\n\n::: {.cell layout-align=\"center\" fig.format='png' fig.asp='0.5' hash='index_cache/revealjs/unnamed-chunk-92_cb5cf98e3bc6afa37a191a96d6f79818'}\n::: {.cell-output-display}\n```{=html}\n<div class=\"grViz html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-36233ef9f53745474802\" style=\"width:60%;height:900px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-36233ef9f53745474802\">{\"x\":{\"diagram\":\"#data_model\\ndigraph {\\ngraph [rankdir=LR tooltip=\\\"Data Model\\\" ]\\n\\nnode [margin=0 fontcolor = \\\"#444444\\\" ]\\n\\nedge [color = \\\"#555555\\\", arrowsize = 1, ]\\n\\npack=true\\npackmode= \\\"node\\\"\\n\\n  \\\"crime_scene_report\\\" [id = \\\"crime_scene_report\\\", label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#555555\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#EFEBDD\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">crime_scene_report<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"drivers_license\\\" [id = \\\"drivers_license\\\", label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#555555\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#EFEBDD\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">drivers_license<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FFFFFF\\\" PORT=\\\"id\\\"><U>id<\\/U><\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"facebook_event_checkin\\\" [id = \\\"facebook_event_checkin\\\", label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#555555\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#EFEBDD\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">facebook_event_checkin<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FFFFFF\\\" PORT=\\\"person_id\\\">person_id<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FFFFFF\\\" PORT=\\\"event_id\\\"><U>event_id<\\/U><\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"get_fit_now_member\\\" [id = \\\"get_fit_now_member\\\", label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#555555\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#EFEBDD\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">get_fit_now_member<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FFFFFF\\\" PORT=\\\"id\\\"><U>id<\\/U><\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FFFFFF\\\" PORT=\\\"person_id\\\">person_id<\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"interview\\\" [id = \\\"interview\\\", label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#555555\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#EFEBDD\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">interview<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FFFFFF\\\" PORT=\\\"person_id\\\">person_id<\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"person\\\" [id = \\\"person\\\", label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#555555\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#EFEBDD\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">person<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FFFFFF\\\" PORT=\\\"id\\\"><U>id<\\/U><\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FFFFFF\\\" PORT=\\\"license_id\\\">license_id<\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n\\\"get_fit_now_member\\\":\\\"person_id\\\"->\\\"person\\\":\\\"id\\\" [id=\\\"get_fit_now_member_1\\\"]\\n\\\"interview\\\":\\\"person_id\\\"->\\\"person\\\":\\\"id\\\" [id=\\\"interview_1\\\"]\\n\\\"facebook_event_checkin\\\":\\\"person_id\\\"->\\\"person\\\":\\\"id\\\" [id=\\\"facebook_event_checkin_1\\\"]\\n\\\"person\\\":\\\"license_id\\\"->\\\"drivers_license\\\":\\\"id\\\" [id=\\\"person_1\\\"]\\n}\",\"config\":{\"engine\":null,\"options\":null}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n## SQL Murder Mystery\n\nYour challenges consist in:\n\n- Find the murderer\n\n- Find who commissioned the murder\n\n:::{.callout-tip collapse=false appearance='default' icon=true}\n## Getting started\n\nOpen the file `crime_scene_report.csv` and search for a **murder that occurred on January 15 of 2018 in the SQL City**. From there, conduct your investigation!\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.6.1/htmlwidgets.js\"></script>\n<script src=\"site_libs/viz-1.8.2/viz.js\"></script>\n<link href=\"site_libs/DiagrammeR-styles-0.2/styles.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/grViz-binding-1.0.9/grViz.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}